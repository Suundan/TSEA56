/*
 * COM.c
 *
 * Created: 4/18/2016 1:08:53 PM
 *  Author: marha996
 */ 

#define F_CPU 1842000UL
#include <avr/io.h>
#include <util/twi.h>
#include <avr/delay.h>
#include <avr/interrupt.h>

unsigned int recieved_data = 0;
uint16_t US_sens_front_left = 0x0;
uint16_t US_sens_back_left = 0x0;
int dataRecieved = 0;

//Interrupt from firefly
ISR(USART_RXC_vect) {
	//Send data to buss
	TWITransmitData(UDR); 
}

//Interrupt from TWI-bus
ISR(TWI_vect){
	
	//Ready to recieve data
	TWCR = (0<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for data
	while(!(TWCR & (1<<TWINT)));
	
	//Maybe check if status register is correct?
	
	//Call recieve function
	TWIRecieveFromSens();
}

//bluetooth config
void init_bluetooth()
{
	// Set TXD (port1) as out, 0b00000010
	DDRD = (1<<PORTD1); 
	
	//Config of baudrate
	UBRRH = 0x00; //(unsigned char)(ubrr>>8);
	UBRRL = 0x00; //(unsigned char)ubrr;
	
	// Enable send, receive and interrupt
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);

	// Data format: 8data, 1stop bit ligger som standard
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
}

//Bus config
void TWIInit(void) {
	
	//Global interrupt enable
	sei();
	
	//Set SCL speed
	TWSR = (0<<TWPS0)|(0<<TWPS1); //Prescaler value
	TWBR = 0x0C;  //Bit rate registry to 12
	
	// Enable bus, ackbit and interrupt
	TWCR = (1<<TWEN)|(1<<TWEA)|(1<<TWIE);
	
	//Slavadress (sista ska vara ett för att enabla general call)
	//Kommmudul: 0x11
	//Sensormodul: 0x21
	//Styrmodul: 0x41
	
	//Set slave address
	TWAR = 0x11;
}

//Transmit 8-bit data through bluetooth
void bluetooth_transmit(uint8_t data)
{
	// Wait for empty buffer
	while ( !( UCSRA & (1<<UDRE)) );
	
	// Save data to buffer and send
	UDR = data;
}

//Send start condition
void TWIStart(void) {
	TWCR = (1<<TWSTA)|(1<<TWINT)|(0<<TWIE)|(1<<TWEN); //Skickar startbit, sätter avbrottsflaggan, avaktiverar avbrott, aktiverar bussen
	while (!(TWCR & (1<<TWINT)));  //Väntar på att start-signalen ska skickas iväg ifall bussen är upptagen t.ex.
}

//Send stop condition
void TWIStop(void) {
	TWCR = (1<<TWSTO)|(1<<TWINT)|(1<<TWIE)|(1<<TWEN)|(1<<TWEA); //Skickar stoppbit, sätter avbrottsflaggan, aktiverar avbrott, aktiverar bussen, aktiverar ackflaggan
}

//Send 8-bit data to bus
void TWITransmitData(uint8_t data) {
	
	//Send start condition
	TWIStart();
	
	//Check if start is sent
	if (!((TWSR & 0xF8) == 0x08 || (TWSR & 0xF8) == 0x10));
	
	//Send slave address
	TWISend(0x40);
	
	//Check if not right
	if((TWSR & 0xF8) != 0x18) {
		
		//Check if arbitration is lost
		if ((TWSR & 0xF8) == 0x38) {
			TWIStop(); //release bus control
			return;	
		}
		
		//"not ack" received
		if ((TWSR & 0xF8) == 0x20) {
						
			//Eventuellt fatal error badness 1000000000
			//Kanske inte behöver skicka ett stoppvilkor utan att det räcker att skicka ett repeated start och hantera det i styr...
			TWIStop(); //release bus control
			TWITransmitData(data); //Resend
			return;
		}
	}
	
	//Send header, own address + info
	TWISend(0x10);
	
	//Data sent, "ack" not received
	if ((TWSR & 0xF8) != 0x28); //handle "not ack" received something very wrong has happened
	
	//send data
	TWISend(data);
	
	//Data sent, "ack" not received
	if ((TWSR & 0xF8) != 0x28); //handle "not ack" received something very wrong has happened
	
	//Send stop condition
	TWIStop();
}

//Send the data
void TWISend(uint8_t data) {
	TWDR = data; //Save data to register
	TWCR = (0<<TWSTA)|(1<<TWINT)|(1<<TWEN); //Send data
	while (!(TWCR & (1<<TWINT))); //Wait for "ack"-bit
}

//receive 16 bit data
uint16_t Recieve16Data(void) {
	
	//Ready to receive next data
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for data
	while(!(TWCR & (1<<TWINT)));
	
	// if "not ack" received, do something
	if ((TWSR & 0xF8) != 0x90);

	//Save msb data to int
	uint16_t data_16 = (TWDR << 8);
	
	//Ready to receive next data
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for data
	while(!(TWCR & (1<<TWINT)));
	
	// if "not ack" received, do something
	if ((TWSR & 0xF8) != 0x90);
	
	//Save lsb data to int
	data_16 |= TWDR;
	return data_16;
}

void TWIRecieveFromSens(void) {
	
	//Get the values from the bus
	US_sens_front_left = Recieve16Data();
	US_sens_back_left = Recieve16Data();
	
	//Ready to recieve stop condition
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for stop condition
	while(!(TWCR & (1<<TWINT))); 
	
	//if not a stop condition
	if ((TWSR & 0xF8) != 0xA0);
	
	//Release bus control
	TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
}


int main(void)
{
    TWIInit();
    init_bluetooth();

    while (1) {
		
	}
}
