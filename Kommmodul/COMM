/*
* COMM.c
*
* Created: 4/19/2016 10:39:58 AM
*  Author: sankl660
*/

#define F_CPU 1842000UL
#include <avr/io.h>
#include <util/twi.h>
#include <util/delay.h>
#include <avr/interrupt.h>

//Sensor data
volatile uint8_t IR_sens_left = 0x0;
volatile uint8_t IR_sens_back_left = 0x0;
volatile uint8_t IR_sens_right = 0x0;
volatile uint8_t IR_sens_front = 0x5;
volatile uint16_t Gyro_sens = 0x0;
volatile uint16_t Photo_distance = 0x0;
volatile uint8_t IR_detector = 0x0;

//Control module ready to receive
volatile int ControlReady = 0x0;

//Wheel
const int wheelRad = 3;
const int numOfWheelSectors = 4;

//Distance variables
volatile float refDist = 0;
volatile float traveledDistTot = 0;

//Map variables
//static const int mapRows = 17;	//Number of rows
//static const int mapCols = 31;	//Number of columns
#define MAPROWS 17
#define MAPCOLS 31
volatile char mapArray[MAPROWS][MAPCOLS];	//The internal map

volatile int roboPos[2];		//Robot position

volatile signed int rowDir;		//Row direction
volatile signed int colDir;		//Coloumn direction

//Interrupt from firefly
ISR(USART_RXC_vect) {
	//Send data to buss
	TWITransmitData(UDR);
}

//Interrupt from TWI-bus
ISR(TWI_vect){
	
	//Disable interrupts while receiving data to bus
	cli();
	
	//If this module was addressed and "ack" was not sent
	if(((TWSR & 0xF8) != 0x60 ) && ( (TWSR & 0xF8) != 0x68))
	{
		//release control of the bus, enable interrupts again and exit vector
		TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		sei();
		return;
	}
	
	//Ready to receive data
	TWCR = (0<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for data
	while(!(TWCR & (1<<TWINT)));
	
	//If "ack" was not transmitted release bus control
	if((TWSR & 0xF8) != 0x80 )
	{
		//release control of the bus, enable interrupts again and exit vector
		TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		sei();
		return;
	}
	
	//Call receive function
	if (TWDR == 0x20)
	{
		TWIRecieveFromSens();
	}
	else if(TWDR = 0x40)
	{
		TWIRecieveFromControl();
	}
	
	//Enable interrupts again
	sei();
}

//Bluetooth config
void init_bluetooth()
{
	// Set TXD (port1) as out, 0b00000010
	DDRD = (1<<PORTD1);
	
	//Config of baudrate
	UBRRH = 0x00; //(unsigned char)(ubrr>>8);
	UBRRL = 0x00; //(unsigned char)ubrr;
	
	// Enable send, receive and interrupt
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);

	// Data format: 8data, 1stop bit ligger som standard
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
}

//Bus config
void TWIInit(void) {
	
	//Global interrupt enable
	sei();
	
	//Set SCL speed
	TWSR = (0<<TWPS0)|(0<<TWPS1); //Prescaler value
	TWBR = 0x00;  //Bit rate registry to 12
	
	//Enable bus, ackbit and interrupt
	TWCR = (1<<TWEN)|(1<<TWEA)|(1<<TWIE);
	
	//Slaveaddress (last bit sould be 0 to disable general call)
	//Commmudule: 0x10
	//Sensormodule: 0x21
	//Styrmodule: 0x41
	
	//Set slave address
	TWAR = 0x10;
}

//Map initializing
void mapInit(void){
	
	//Initializing all boxes to be uncharted ('u')
	for(int i = 0; i < MAPROWS; i++){
		for (int j = 0; j < MAPCOLS; j++)
		{
			mapArray[i][j] = 'u';
		}
	}
	
	//The starting point of robot
	roboPos[0] = 17;
	roboPos[1] = 16;
	
	//Updating surrounding boxes
	mapArray[17][16] = 'o';
	mapArray[16][16] = 'o';
	mapArray[17][15] = 'w';
	mapArray[17][17] = 'w';
	
	//Sets the start direction of the robot
	rowDir = -1;
	colDir = 0;
}

//Transmit 8-bit data through Bluetooth
void bluetooth_transmit(uint8_t data)
{
	//Wait for empty buffer
	while ( !( UCSRA & (1<<UDRE)) );
	
	//Save data to buffer and send
	UDR = data;
}

//Send start condition
void TWIStart(void) {
	TWCR = (1<<TWSTA)|(1<<TWINT)|(0<<TWIE)|(1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
}

//Send stop condition
void TWIStop(void) {
	TWCR = (1<<TWSTO)|(1<<TWINT)|(1<<TWIE)|(1<<TWEN)|(1<<TWEA);
}

//Send 8-bit data to bus
void TWITransmitData(uint8_t data) {
	
	//Disable interrupts while sending data to bus
	cli();
	
	//Send start condition
	TWIStart();
	
	//Check if start is not sent
	if (((TWSR & 0xF8) != 0x08) && ((TWSR & 0xF8) != 0x10))
	{
		TWIStop();
		sei();
		return;
	}
	
	//Send slave address
	TWISend(0x40);
	
	//Check if not right
	if((TWSR & 0xF8) != 0x18) {
		
		//Check if arbitration is lost
		if ((TWSR & 0xF8) == 0x38) {
			TWIStop(); //release bus control
			sei();
			return;
		}
		
		//"not ack" received
		if ((TWSR & 0xF8) == 0x20) {
			
			TWIStop(); //release bus control
			TWITransmitData(data); //Resend
			return;
		}
	}
	
	//Send header, own address + info
	TWISend(0x10);
	
	//Data sent, "ack" not received
	if ((TWSR & 0xF8) != 0x28)
	{
		TWIStop(); //release bus control
		TWITransmitData(data); //Resend
		return;
	}
	
	//Send data
	TWISend(data);
	
	//Data sent, "ack" not received
	if ((TWSR & 0xF8) != 0x28)
	{
		TWIStop(); //release bus control
		TWITransmitData(data); //Resend
		return;
	}
	
	//Send stop condition
	TWIStop();
	
	//Enable interrupts again
	sei();
}

//Send the data
void TWISend(uint8_t data) {
	TWDR = data; //Save data to register
	TWCR = (0<<TWSTA)|(1<<TWINT)|(1<<TWEN); //Send data
	while (!(TWCR & (1<<TWINT))); //Wait for "ack"-bit
}

//Receive 16 bit data
uint16_t Recieve16Data(void) {
	
	//Ready to receive next data
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for data
	while(!(TWCR & (1<<TWINT)));
	
	// if "ack" was not sent
	if ((TWSR & 0xF8) != 0x80)
	{
		return 0;
	}

	//Save msb data to int
	uint16_t data_16 = (TWDR << 8);
	
	//Ready to receive next data
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for data
	while(!(TWCR & (1<<TWINT)));
	
	// if "ack" was not sent
	if ((TWSR & 0xF8) != 0x80)
	{
		return 0;
	}
	
	//Save lsb data to int
	data_16 |= TWDR;
	return data_16;
}

//Receive 8 bit data
uint8_t Recieve8Data(void) {
	
	//Ready to receive next data
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for data
	while(!(TWCR & (1<<TWINT)));

	//If "ack" was not sent
	if ((TWSR & 0xF8) != 0x80)
	{
		return 0;
	}
	
	return TWDR;
}

//Receive sensor data
void TWIRecieveFromSens(void) {
	
	//Get the values from the bus
	IR_sens_left = Recieve8Data();
	
	//If "ack" was not sent
	if ((TWSR & 0xF8) != 0x80)
	{
		TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		return;
	}
	
	IR_sens_back_left = Recieve8Data();
	
	//If "ack" was not sent
	if ((TWSR & 0xF8) != 0x80)
	{
		TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		return;
	}
	
	IR_sens_right = Recieve8Data();
	
	//If "ack" was not sent
	if ((TWSR & 0xF8) != 0x80)
	{
		TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		return;
	}
	
	IR_sens_front = Recieve8Data();
	
	//If "ack" was not sent
	if ((TWSR & 0xF8) != 0x80)
	{
		TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		return;
	}
	
	Gyro_sens = Recieve16Data();
	
	//If "ack" was not sent
	if ((TWSR & 0xF8) != 0x80)
	{
		TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		return;
	}
	
	Photo_distance = Recieve16Data();
	
	//If "ack" was not sent
	if ((TWSR & 0xF8) != 0x80)
	{
		TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		return;
	}
	
	IR_detector = Recieve8Data();
	
	//If "ack" was not sent
	if ((TWSR & 0xF8) != 0x80)
	{
		TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		return;
	}
	
	//Ready to receive stop condition
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for stop condition
	while(!(TWCR & (1<<TWINT)));
	
	//Release bus control
	TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
}

//Receive data from control module
void TWIRecieveFromControl(void)
{
	ControlReady = Recieve8Data();
	
	// if "ack" was not sent
	if ((TWSR & 0xF8) != 0x80)
	{
		TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		return;
	}
	
	//Ready to receive stop condition
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for stop condition
	while(!(TWCR & (1<<TWINT)));
	
	//Release bus control
	TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
}

//Send sensor data to PC
void sendSensorData(void) {
	bluetooth_transmit('s');
	bluetooth_transmit(IR_sens_left);
	bluetooth_transmit(IR_sens_back_left);
	bluetooth_transmit(IR_sens_right);
	bluetooth_transmit(IR_sens_front);
	bluetooth_transmit(Gyro_sens >> 8);
	bluetooth_transmit(Gyro_sens & 0xFF);
	bluetooth_transmit(Photo_distance >> 8);
	bluetooth_transmit(Photo_distance & 0xFF);
	bluetooth_transmit(IR_detector);
}

//Send map to PC
void sendMap(char map[MAPROWS][MAPCOLS]){
	
	char tmp = mapArray[roboPos[0]][roboPos[1]];
	
	mapArray[roboPos[0]][roboPos[1]] = 'p';
	
	//Makes the PC ready to receive map-data
	bluetooth_transmit('m');
	
	//Send every byte of map
	for(int i = 0; i < MAPROWS; i++){
		for (int j = 0; j < MAPCOLS; j++)
		{
			bluetooth_transmit(map[i][j]);
		}
	}
	
	mapArray[roboPos[0]][roboPos[1]] = tmp;
}

//Go forward, adjusting to wall
void goForward(){
	//Go forward, adjust to wall
	TWITransmitData('p');
}

//Turns 90 degrees left
void turnLeft(){
	//Turn left, 90 degrees
	TWITransmitData('s');
	ControlReady = 0x0;
	
	//Update direction
	if (rowDir != 0)
	{
		colDir = rowDir;
		rowDir = 0;
	}
	else
	{
		rowDir = - colDir;
		colDir = 0;
	}
	
	while(ControlReady != 0xAA);
}

//Turns 90 degrees right
void turnRight(){
	
	TWITransmitData('k');
	ControlReady = 0x0;
	
	//Update direction
	if (rowDir != 0)
	{
		colDir = - rowDir;
		rowDir = 0;
	}
	else
	{
		rowDir = colDir;
		colDir = 0;
	}
	
	while(ControlReady != 0xAA);
}

//Turns 180 degrees
void rotate(void)
{
	TWITransmitData('u');
	ControlReady = 0x0;
	
	//Update direction
	if (rowDir != 0)
	{
		colDir = 0;
		rowDir = -rowDir;
	}
	else
	{
		rowDir = 0;
		colDir = -colDir;
	}
	
	while(ControlReady != 0xAA);
}

//Checks if robot has been to the left
int leftIsFree(int coords[2]){
	//If it's open to the left
	if (IR_sens_left < 0x1C)
	{
		//If it's uncharted to the left, "open" the box
		if (mapArray[coords[0]][coords[1]] == 'u')
		{
			mapArray[coords[0]][coords[1]] = 'o';
			return 1;
		}
	}
	//If it's not open to the left, then it's a wall
	if (mapArray[coords[0]][coords[1]] == 'u')
	{
		mapArray[coords[0]][coords[1]] = 'w';
	}
	return 0;
}

//Checks if robot has been to the front
int frontIsFree(int coords[2])
{
	//If it's open in the front
	if (IR_sens_front < 0x23)
	{
		//If it's uncharted, make it open
		if (mapArray[coords[0]][coords[1]] == 'u')
		{
			mapArray[coords[0]][coords[1]] = 'o';
			return 1;
		}
	}
	//If it's not open to the front, make it a wall
	if (mapArray[coords[0]][coords[1]] == 'u')
	{
		mapArray[coords[0]][coords[1]] = 'w';
	}
	return 0;
}

//Checks if robot has been to the right
int rightIsFree(int coords[2]){
	//If it's open to the right
	if (IR_sens_right < 0x1C)
	{
		//If it's uncharted, make it open
		if (mapArray[coords[0]][coords[1]] == 'u')
		{
			mapArray[coords[0]][coords[1]] = 'o';
			return 1;
		}
	}
	//If not open to the right, make it a wall
	if (mapArray[coords[0]][coords[1]] == 'u')
	{
		mapArray[coords[0]][coords[1]] = 'w';
	}
	return 0;
}

//Finds the coordinates adjacent to the YI-Bot
//in order: to the left of, front of, to the right of
void findAdjCoords(int *leftCoords[2], int *frontCoords[2], int *rightCoords[2])
{
	//TODO check if locally defined pointers need to be freed
	//TODO make sure this code works
	if (rowDir == 1)
	{
		*leftCoords[0] = roboPos[0];
		*leftCoords[1] = roboPos[1]+1;
		*frontCoords[0] = roboPos[0]+1;
		*frontCoords[1] = roboPos[1];
		*rightCoords[0] = roboPos[0];
		*rightCoords[1] = roboPos[1]-1;
	}
	else if (rowDir == -1)
	{
		*leftCoords[0] = roboPos[0];
		*leftCoords[1] = roboPos[1]-1;
		*frontCoords[0] = roboPos[0]-1;
		*frontCoords[1] = roboPos[1];
		*rightCoords[0] = roboPos[0];
		*rightCoords[1] = roboPos[1]+1;
	}
	else if (colDir == 1)
	{
		*leftCoords[0] = roboPos[0]-1;
		*leftCoords[1] = roboPos[1];
		*frontCoords[0] = roboPos[0];
		*frontCoords[1] = roboPos[1]+1;
		*rightCoords[0] = roboPos[0]+1;
		*rightCoords[1] = roboPos[1];
	}
	else
	{
		*leftCoords[0] = roboPos[0]+1;
		*leftCoords[1] = roboPos[1];
		*frontCoords[0] = roboPos[0];
		*frontCoords[1] = roboPos[1]-1;
		*rightCoords[0] = roboPos[0]-1;
		*rightCoords[1] = roboPos[1];
	}
}

//"Floods" the map to find the closest decision point with open ('o') adjacent boxes
void goTo(int coords[2])
{
	int floodMapFirstCol;
	char floodMap[15][15];
	int oCoords[2];
	
	//Finds where to cut off the big map
	for (int i = 1; i<16; i++)
	{
		for (int j = 1; j<16; j++)
		{
			if (mapArray[i][j] != 'u' || mapArray[i][j] != 'w')
			{
				floodMapFirstCol = j;
				break;
			}
		}
	}
	
	//Makes the flooding-map as a copy of a part of the big map
	for (int i = 1; i < 16; i++)
	{
		for (int j = floodMapFirstCol; j < floodMapFirstCol + 15; j++)
		{
			floodMap[i][j] =  mapArray[i][j];
		}
	}
	
	//Floods map until an open intersection is found
	int foundO = 0;
	int floodingRound = 1;
	floodMap[roboPos[0]][roboPos[1]] = 0;
	
	//Flooding
	while(!foundO)
	{
		for(int i = 0; i<15; i++)
		{
			for (int j = 0; j<15; j++)
			{
				//Checks if box was flooded last round
				if (floodMap[i][j] == floodingRound - 1)
				{
					//Floods adjacent boxes
					if ((i+1 < 15) && (floodMap[i+1][j] > floodingRound) && (floodMap[i+1][j] < 97 /*97 because that's where the lower case letters begin in ASCII*/))
					{
						floodMap[i+1][j] = floodingRound;
					}
					if ((i-1 > -1) && (floodMap[i+1][j] > floodingRound) && (floodMap[i-1][j] < 97))
					{
						floodMap[i-1][j] = floodingRound;
					}
					if ((j+1 < 15) && (floodMap[i][j+1] > floodingRound) && (floodMap[i][j+1] < 97))
					{
						floodMap[i][j+1] = floodingRound;
					}
					if ((j-1 > -1) && (floodMap[i][j-1] > floodingRound) && (floodMap[i][j-1] < 97))
					{
						floodMap[i][j-1] = floodingRound;
					}
				}
				//Save the coordinates of the closest open space in oCoords
				else if (floodMap[i][j] == 'o')
				{
					oCoords[0] = floodMap[i];
					oCoords[1] = floodMap[j];
					foundO = 1;
				}
				++floodingRound;
			}
		}
	}
	
	//Decides route to found intersection
	int route[floodingRound][2];
	route[floodingRound-1][0] = oCoords[0];
	route[floodingRound-1][1] = oCoords[1];
	
	if (foundO)
	{
		while(floodingRound > 1)
		{
			if ((route[floodingRound-1][1]+1 < 15) && (floodMap[route[floodingRound-1][0]+1][route[floodingRound-1][1]] < floodingRound))
			{
				route[floodingRound-2][0] = floodMap[route[floodingRound-1][0]+1];
				route[floodingRound-2][1] = floodMap[route[floodingRound-1][1]];
			}
			else if ((route[floodingRound-1][1]-1 > 0) && (floodMap[route[floodingRound-1][0]-1][route[floodingRound-1][1]] < floodingRound))
			{
				route[floodingRound-2][0] = floodMap[route[floodingRound-1][0]-1];
				route[floodingRound-2][1] = floodMap[route[floodingRound-1][1]];
			}
			else if ((route[floodingRound-1][0]+1 < 15) && (floodMap[route[floodingRound-1][0]][route[floodingRound-1][1]+1] < floodingRound))
			{
				route[floodingRound-2][0] = floodMap[route[floodingRound-1][0]];
				route[floodingRound-2][1] = floodMap[route[floodingRound-1][1]+1];
			}
			else if ((route[floodingRound-1][0]-1 > 0) && (floodMap[route[floodingRound-1][0]][route[floodingRound-1][1]-1] < floodingRound))
			{
				route[floodingRound-2][0] = floodMap[route[floodingRound-1][0]];
				route[floodingRound-2][1] = floodMap[route[floodingRound-1][1]-1];
			}
			else
			{
				//If we end up here, something fucked up happened, lol.
			}
			--floodingRound;
		}
	}
	//TODO take robot to found point via decided route
	for (int i = 0; i < (sizeof(route) / sizeof(route[0])); i++)
	{
		sendMap(mapArray);
		sendSensorData();
	}
}

//Decision maker in an intersection or a turn
void controlDecision(){
	
	TWITransmitData('b');
	ControlReady = 0x0;
	
	//Update map, this is a decision node
	mapArray[roboPos[0]][roboPos[1]] = 'd';
	int tmpLeftCoords[2];
	int tmpFrontCoords[2];
	int tmpRightCoords[2];
	findAdjCoords(&tmpLeftCoords, &tmpFrontCoords, &tmpRightCoords);
	
	int leftFree = leftIsFree(tmpLeftCoords);
	int rightFree = rightIsFree(tmpRightCoords);
	int frontFree = frontIsFree(tmpFrontCoords);
	
	while(ControlReady != 0xAA);
	
	if (leftFree )
	{
		turnLeft();
		goForward();
	}
	else if (frontFree)
	{
		TWITransmitData('z');
		ControlReady = 0x0;
		while(ControlReady != 0xAA);
		goForward();
	}
	else if (rightFree)
	{
		turnRight();
		goForward();
	}
	else
	{
		TWITransmitData('S');
		
		//int goToCoords[2] = findClosestOpenIntersect();
		//goTo(goToCoords);
	}
	mapArray[roboPos[0]][roboPos[1]] = 'c';
	refDist = 0;
}

//Checks if map needs update
void check_dist(){
	float numOfWheelTurns = 0;
	
	numOfWheelTurns = (float) Photo_distance / numOfWheelSectors;
	traveledDistTot = 2*3.14*wheelRad*numOfWheelTurns; // Total distance in cm
	if (traveledDistTot - refDist > 40)
	{
		//Update map
		mapArray[roboPos[0]][roboPos[1]] = 'c';
		if (colDir == 0)
		{
			mapArray[roboPos[0]][roboPos[1]+1] = 'w';
			mapArray[roboPos[0]][roboPos[1]-1] = 'w';
		}
		else
		{
			mapArray[roboPos[0]+1][roboPos[1]] = 'w';
			mapArray[roboPos[0]-1][roboPos[1]] = 'w';
		}
		
		//Update robot position
		roboPos[0] = roboPos[0] + colDir;
		roboPos[1] = roboPos[1] + rowDir;
		
		refDist = traveledDistTot;
	}
}

int main(void)
{
	TWIInit();
	init_bluetooth();
	mapInit();
	
	while (1)
	{
		//Check if autonomous mode
		if (!(PINB & (1<<PINB0))) {
			
			TWITransmitData('z');
			ControlReady = 0x0;
			while(ControlReady != 0xAA);
			
			TWITransmitData('p');
			
			while (1)
			{
				check_dist();
				
				if ((IR_sens_left < 0x1C) || (IR_sens_right < 0x1C))
				{
					TWITransmitData('S');
					controlDecision();
				}
				else if (IR_sens_front > 0x50)
				{
					rotate();
					goForward();
				}
				
				sendSensorData();
				sendMap(mapArray);
			}
			
		}
		else
		{
			sendSensorData();
			_delay_ms(100);
		}
	}
}
