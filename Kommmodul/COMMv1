/*
* COMM.c
*
* Created: 4/19/2016 10:39:58 AM
*  Author: sankl660
*/

#define F_CPU 1842000UL
#include <avr/io.h>
#include <util/twi.h>
#include <avr/delay.h>
#include <avr/interrupt.h>

unsigned int recieved_data = 0;
uint16_t US_sens_front_left = 0x0;
uint16_t US_sens_back_left = 0x0;
uint16_t US_sens_ahead = 0x0;
uint16_t US_sens_right = 0x0;
uint8_t Gyro_sens = 0x0;
uint16_t Photo_distance = 0x0;
uint8_t IR_detector = 0x0;
int dataRecieved = 0;

int wheelRad = 3;

const int mapRows = 17;
const int mapCols = 31;
char mapArray[17][31];

int roboPos[2];

signed int rowDir;
signed int colDir;

//Interrupt from firefly
ISR(USART_RXC_vect) {
	//Send data to buss
	TWITransmitData(UDR);
}

//Interrupt from TWI-bus
ISR(TWI_vect){
	
	//Ready to recieve data
	TWCR = (0<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for data
	while(!(TWCR & (1<<TWINT)));
	
	//Maybe check if status register is correct?
	
	//Call recieve function
	TWIRecieveFromSens();
}

//bluetooth config
void init_bluetooth()
{
	// Set TXD (port1) as out, 0b00000010
	DDRD = (1<<PORTD1);
	
	//Config of baudrate
	UBRRH = 0x00; //(unsigned char)(ubrr>>8);
	UBRRL = 0x00; //(unsigned char)ubrr;
	
	// Enable send, receive and interrupt
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);

	// Data format: 8data, 1stop bit ligger som standard
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
}

//Bus config
void TWIInit(void) {
	
	//Global interrupt enable
	sei();
	
	//Set SCL speed
	TWSR = (0<<TWPS0)|(0<<TWPS1); //Prescaler value
	TWBR = 0x0C;  //Bit rate registry to 12
	
	// Enable bus, ackbit and interrupt
	TWCR = (1<<TWEN)|(1<<TWEA)|(1<<TWIE);
	
	//Slavadress (sista ska vara ett för att enabla general call)
	//Kommmudul: 0x11
	//Sensormodul: 0x21
	//Styrmodul: 0x41
	
	//Set slave address
	TWAR = 0x11;
}

//Map initializing
void mapInit(void){
	for(int i = 0; i < mapRows; i++){
		for (int j = 0; j < mapCols; j++)
		{
			mapArray[i][j] = 'u';
		}
	}
	
	mapArray[17][16] = 'o';
	mapArray[16][16] = 'o';
	mapArray[17][15] = 'w';
	mapArray[17][17] = 'w';
	
	roboPos[1] = 17;
	roboPos[2] = 16;
	
	rowDir = -1;
	colDir = 0;
}

//Transmit 8-bit data through bluetooth
void bluetooth_transmit(uint8_t data)
{
	// Wait for empty buffer
	while ( !( UCSRA & (1<<UDRE)) );
	
	// Save data to buffer and send
	UDR = data;
}

//Send start condition
void TWIStart(void) {
	TWCR = (1<<TWSTA)|(1<<TWINT)|(0<<TWIE)|(1<<TWEN); //Skickar startbit, sätter avbrottsflaggan, avaktiverar avbrott, aktiverar bussen
	while (!(TWCR & (1<<TWINT)));  //Väntar på att start-signalen ska skickas iväg ifall bussen är upptagen t.ex.
}

//Send stop condition
void TWIStop(void) {
	TWCR = (1<<TWSTO)|(1<<TWINT)|(1<<TWIE)|(1<<TWEN)|(1<<TWEA); //Skickar stoppbit, sätter avbrottsflaggan, aktiverar avbrott, aktiverar bussen, aktiverar ackflaggan
}

//Send 8-bit data to bus
void TWITransmitData(uint8_t data) {
	
	//Send start condition
	TWIStart();
	
	//Check if start is sent
	if (!((TWSR & 0xF8) == 0x08 || (TWSR & 0xF8) == 0x10));
	
	//Send slave address
	TWISend(0x40);
	
	//Check if not right
	if((TWSR & 0xF8) != 0x18) {
		
		//Check if arbitration is lost
		if ((TWSR & 0xF8) == 0x38) {
			TWIStop(); //release bus control
			return;
		}
		
		//"not ack" received
		if ((TWSR & 0xF8) == 0x20) {
			
			//Eventuellt fatal error badness 1000000000
			//Kanske inte behöver skicka ett stoppvilkor utan att det räcker att skicka ett repeated start och hantera det i styr...
			TWIStop(); //release bus control
			TWITransmitData(data); //Resend
			return;
		}
	}
	
	//Send header, own address + info
	TWISend(0x10);
	
	//Data sent, "ack" not received
	if ((TWSR & 0xF8) != 0x28); //handle "not ack" received something very wrong has happened
	
	//send data
	TWISend(data);
	
	//Data sent, "ack" not received
	if ((TWSR & 0xF8) != 0x28); //handle "not ack" received something very wrong has happened
	
	//Send stop condition
	TWIStop();
}

//Send the data
void TWISend(uint8_t data) {
	TWDR = data; //Save data to register
	TWCR = (0<<TWSTA)|(1<<TWINT)|(1<<TWEN); //Send data
	while (!(TWCR & (1<<TWINT))); //Wait for "ack"-bit
}

//receive 16 bit data
uint16_t Recieve16Data(void) {
	
	//Ready to receive next data
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for data
	while(!(TWCR & (1<<TWINT)));
	
	// if "not ack" received, do something
	if ((TWSR & 0xF8) != 0x90);

	//Save msb data to int
	uint16_t data_16 = (TWDR << 8);
	
	//Ready to receive next data
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for data
	while(!(TWCR & (1<<TWINT)));
	
	// if "not ack" received, do something
	if ((TWSR & 0xF8) != 0x90);
	
	//Save lsb data to int
	data_16 |= TWDR;
	return data_16;
}

//receive 8 bit data
uint8_t Recieve8Data(void) {
	
	//Ready to receive next data
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for data
	while(!(TWCR & (1<<TWINT)));
	
	// if "not ack" received, do something
	if ((TWSR & 0xF8) != 0x90);

	return TWDR;
}

void TWIRecieveFromSens(void) {
	
	//Get the values from the bus
	US_sens_front_left = Recieve16Data();
	US_sens_back_left = Recieve16Data();
	//US_sens_ahead = Recieve16Data();
	//US_sens_right = Recieve16Data();
	Gyro_sens = Recieve8Data();
	Photo_distance = Recieve16Data();
	//IR_detector = Recieve8Data();
	
	//Ready to recieve stop condition
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	
	//Wait for stop condition
	while(!(TWCR & (1<<TWINT)));
	
	//if not a stop condition
	if ((TWSR & 0xF8) != 0xA0);
	
	//Release bus control
	TWCR = (1<<TWIE)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
}

void sendSensorData(void) {
	bluetooth_transmit('s');
	bluetooth_transmit(US_sens_front_left >> 8);
	bluetooth_transmit(US_sens_front_left & 0xFF);
	
	bluetooth_transmit(US_sens_back_left >> 8);
	bluetooth_transmit(US_sens_back_left & 0xFF);
	
	bluetooth_transmit(Gyro_sens);
	
	//bluetooth_transmit(US_sens_ahead >> 8);
	//bluetooth_transmit(US_sens_ahead & 0xFF);
	//
	//bluetooth_transmit(US_sens_right >> 8);
	//bluetooth_transmit(US_sens_right & 0xFF);
	
	bluetooth_transmit(Photo_distance >> 8);
	bluetooth_transmit(Photo_distance & 0xFF);
	
	//bluetooth_transmit(IR_detector);
}

void sendMap(char map[mapRows][mapCols]){
	
	char tmp = mapArray[roboPos[1]][roboPos[2]];
	
	mapArray[roboPos[1]][roboPos[2]] = 'p';
	
	bluetooth_transmit('m');
	
	for(int i = 0; i < mapRows; i++){
		for (int j = 0; j < mapCols; j++)
		{
			if (map[i][j] == 'd' | map[i][j] == 'c')
			{
				bluetooth_transmit('o');
			}
			else
			{
				bluetooth_transmit(map[i][j]);
			}
		}
	}
	
	mapArray[roboPos[1]][roboPos[2]] = tmp;
}

int travelledBoxes(){
	float numOfWheelTurns = 0;
	float travelledDist = 0;
	
	numOfWheelTurns = (float) Photo_distance / 4.0; // 4.0 = antal svart/vit-övergång på hjulet TODO
	
	travelledDist = 2*3.14*wheelRad*numOfWheelTurns;
	
	return round(travelledDist / 40);
}

void goForward(){
	//Go forward, adjust to wall
	//TODO: go forward until next decision, don't forget to update map
	TWITransmitData('p');
	
	//Update map
	mapArray[roboPos[1]][roboPos[2]] = 'c';
	
	//Update robot position
	roboPos[1] = roboPos[1] + colDir;
	roboPos[2] = roboPos[2] + rowDir;
}

void turnLeft(){
	//Turn left, 90 degrees
	TWITransmitData('v');
	
	//Update direction
	if (rowDir != 0)
	{
		colDir = rowDir;
		rowDir = 0;
	}
	else
	{
		rowDir = - colDir;
		colDir = 0;
	}
}

void turnRight(){
	//Turn right, 90 degrees
	TWITransmitData('r');
	
	//Update direction
	if (rowDir != 0)
	{
		colDir = - rowDir;
		rowDir = 0;
	}
	else
	{
		rowDir = colDir;
		colDir = 0;
	}
}

void goShort(){
	//Go forward, ca 30 cm
	TWITransmitData('s');
	//TODO: Update robot pos
}

void goLong(){
	//Go forward, ca 40 cm
	TWITransmitData('k');
	//TODO: Update robot pos
}

void controlDecision(){
	//If left sensor value is larger than 40 cm
	if (US_sens_front_left > 0x10B8)
	{
		goShort();
		
		//Update map, this is a decision node
		mapArray[roboPos[1]][roboPos[2]] = 'd';
		
		//Four-way intersection
		if (US_sens_right > 0x10B8 & US_sens_ahead > 0x10B8)
		{
			//Turn left if uncharted
			//Direction: up or down
			if (colDir == 0)
			{
				if (mapArray[roboPos[1]][roboPos[2]+rowDir] != 'c')
				{
					turnLeft();
					goLong();
					goForward();
				}
				else if (mapArray[roboPos[1]+rowDir][roboPos[2]] != 'c')
				{
					goLong();
					goForward();
				}
				else
				{
					turnRight();
					goLong();
					goForward();
				}
			}
			//Direction: left or right
			else //if (rowDir == 0)
			{
				if (mapArray[roboPos[1]-colDir][roboPos[2]] != 'c')
				{
					turnLeft();
					goLong();
					goForward();
				}
				else if (mapArray[roboPos[1]][roboPos[2]+colDir] != 'c')
				{
					goLong();
					goForward();
				}
				else
				{
					turnRight();
					goLong();
					goForward();
				}
			}
			
			//Update map
			//Intersection as in pic 6
			if (rowDir == 1)
			{
				mapArray[roboPos[1]-1][roboPos[2]] == 'c';
				mapArray[roboPos[1]][roboPos[2]-1] == 'o';
				mapArray[roboPos[1]+1][roboPos[2]] == 'o';
				mapArray[roboPos[1]][roboPos[2]+1] == 'o';
			}
			//Intersection as in pic 9
			else if (rowDir == -1)
			{
				mapArray[roboPos[1]-1][roboPos[2]] == 'o';
				mapArray[roboPos[1]][roboPos[2]-1] == 'o';
				mapArray[roboPos[1]+1][roboPos[2]] == 'c';
				mapArray[roboPos[1]][roboPos[2]+1] == 'o';
			}
			//Intersection as in pic 8
			else if (colDir == 1)
			{
				mapArray[roboPos[1]-1][roboPos[2]] == 'o';
				mapArray[roboPos[1]][roboPos[2]-1] == 'c';
				mapArray[roboPos[1]+1][roboPos[2]] == 'o';
				mapArray[roboPos[1]][roboPos[2]+1] == 'o';
			}
			//Intersection as in pic 10
			else
			{
				mapArray[roboPos[1]-1][roboPos[2]] == 'o';
				mapArray[roboPos[1]][roboPos[2]-1] == 'o';
				mapArray[roboPos[1]+1][roboPos[2]] == 'o';
				mapArray[roboPos[1]][roboPos[2]+1] == 'c';
			}
		}
		
		//Three-way intersection as in pic 5
		else if (US_sens_ahead > 0x10B8 & US_sens_right <= 0x042E)
		{
			goShort();
			
			//Update map, this is a decision node
			mapArray[roboPos[1]][roboPos[2]] = 'd';
			
			//Turn left if uncharted
			if (mapArray[roboPos[1]+1][roboPos[2]] != 'c')
			{
				turnLeft();
				goLong();
				goForward();
			}
			else
			{
				goLong();
				goForward();	
			}
			
			//Update map
			mapArray[roboPos[1]][roboPos[2]+1] == 'c';
			mapArray[roboPos[1]][roboPos[2]-1] == 'o';
			mapArray[roboPos[1]+1][roboPos[2]] == 'o';
		}
		//Three-way intersection as in pic 3
		else if (US_sens_right > 0x10B8 & US_sens_ahead <= 0x042E)
		{
			goShort();
			
			//Update map, this is a decision node
			mapArray[roboPos[1]][roboPos[2]] = 'd';
			
			//Turn left if uncharted
			if (mapArray[roboPos[1]][roboPos[2]-1] != 'c')
			{
				turnLeft();
				goLong();
				goForward();
			} 
			else
			{
				turnRight();
				goLong();
				goForward();  
			}
			
		}
		//Corner, turn left as in pic 2
		else // (US_sens_ahead <= 0x042E & US_sens_right <= 0x042E)
		{
			goShort();
			
			turnLeft();
			goLong();
			goForward();
		}
	}
	//If right sensor value is larger than 40 cm
	else if (US_sens_right > 0x10B8)
	{
		goShort();
		
		mapArray[roboPos[1]][roboPos[2]] == 'd';
		
		//Three-way intersection as in pic 4
		if (US_sens_ahead > 0x10B8 & US_sens_front_left <= 0x042E)
		{
			if (mapArray[roboPos[1]][roboPos[2]+1] != 'c')
			{
				goLong();
				goForward();
			} 
			else
			{
				turnRight();
				goLong();
				goForward();
			}
		}
		//Corner, turn right as in pic 1
		else // (US_sens_ahead <= 0x042E & US_sens_front_left <= 0x042E)
		{
			turnRight();
			goLong();
			goForward();
		}
	}
	//Dead-end as in pic 7
	else if (US_sens_ahead < 0x10B8 & US_sens_right < 0x10B8 & US_sens_front_left < 0x10B8)
	{
		//Turn 180 degrees and go back to decision point
		TWITransmitData('u');
		goForward();
	}
	else
	{
		goForward();
	}
}

int main(void)
{

	TWIInit();
	init_bluetooth();
	mapInit();
	int remotePin = 1;
	
	while (1)
	{
		sendSensorData();
		_delay_ms(500);
	}
}
