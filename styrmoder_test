/*
* styr_intial_test.c
*
* Created: 2016-04-04 12:39:29
* Author : Fredrik, Milton
*/
#define F_CPU 1000000UL
#include <avr/io.h>
#include <avr/delay.h>

char current_command = 'S';
unsigned int test = 0;

void init_pwm()
{
	DDRD = 0b00110011; // PD0, PD1 Utångar, PD4,PD5 utgångar (enable OCR1A/B)
	OCR1A = 0x0;
	OCR1B = 0x0;
	PORTD |= (1<<PORTD0); // DIR_RIGHT Direction framåt
	PORTD &= ~(1<<PORTD1); // DIR_LEFT framåt
	TCCR1A |= (1<<COM1A1)| (0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<WGM10)|(1<<WGM11); // Sätter den i fast PWM-mode 10 bit.
	TCCR1B |= (0<<WGM13)|(1<<WGM12)|(1<<CS10)|(0<<CS12); // Noninverted med ingen prescaled klocka.

	
}


void forward(unsigned int speed_right, unsigned int speed_left)
{
	OCR1A = speed_left; // Sätter hastighet på (som andel av 0x03ff)
	OCR1B = speed_right; // Sätter hastighet på (som andel av 0x03ff)
	PORTD |= (1<<PORTD0); // DIR_RIGHT Direction framåt
	PORTD &= ~(1<<PORTD1); // DIR_LEFT framåt
}

void backward(unsigned int speed_right, unsigned int speed_left)
{
	OCR1A = speed_left; // Sätter hastighet på (som andel av 0x03ff)
	OCR1B = speed_right; // Sätter hastighet på (som andel av 0x03ff)
	PORTD &= ~(1<<PORTD0); // DIR_RIGHT bakåt
	PORTD |= (1<<PORTD1); // DIR_LEFT bakåt
}

void stop()
{
	OCR1A = 0x0; // Sätter hastighet noll på
	OCR1B = 0x0; // Sätter hastighet noll på
}

void turn_left(unsigned int speed)
{
	PORTD &= ~(1<<PORTD0); // DIR_RIGHT bakåt
	PORTD &= ~(1<<PORTD1); // DIR_LEFT framåt
	OCR1A = speed;
	OCR1B = speed;
}

void turn_right(unsigned int speed)
{
	PORTD |= (1<<PORTD0);
	PORTD |= (1<<PORTD1);
	OCR1A = speed;
	OCR1B = speed;
}

void test_command()
{
	switch (test)
	{
		case 0:
			current_command = 'F';
			break;
		case 1:
			current_command = 'S';
			break;
		case 2:
			current_command = 'L';
			break;
		case 3:
			current_command = 'R';
			break;
		case 4:
			current_command = 'Q';
			break;
		case 5:
			current_command = 'E';
			break;
		case 6:
			current_command = 'B';
			break;
		default:
			current_command = 'S';
	}
	++test;
		
}

int main(void)
{
	init_pwm(); //Sätter grundinställningar för PWM
	
	
	if (PINB0 == 0) // Manuellt läge
	{
		while (1)
		{
			test_command();	
			switch(current_command)
			{
				case 'S':
					stop();
					break;
				case 'F':
					forward(0x123,0x123);
					break;
				case 'L':
					turn_left(0x123);
					break;
				case 'R':
					turn_right(0x123);
					break;
				case 'E':	// Fram höger
					forward(0x223,0xff);
					break;
				case 'Q':	// Fram vänster
					forward(0xff,0x223);
					break;
				default:
					stop();
			}
			_delay_ms(2000);			
		}
	}
	
	else // Automatiskt läge
	{
		while (1)
		{
			
		}
	}
}

