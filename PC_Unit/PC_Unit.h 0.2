#ifndef PC_UNIT_H
#define PC_UNIT_H

#include <Windows.h>
#include <iostream>
#include <string>

#pragma once

namespace CppWinForm1 {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace System::IO::Ports;

	/// <summary>
	/// Summary for PC_Unit
	/// </summary>
	public ref class PC_Unit : public System::Windows::Forms::Form
	{
	public:
		PC_Unit(void)
		{
			InitializeComponent();
			InitializeOther();
			pc_map = gcnew array<char>(mapCols * mapRows);
			//
			//TODO: Add the constructor code here
			//
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~PC_Unit()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Button^  openCOMBut;
	private: System::Windows::Forms::Button^  findCOMBut;
	private: static System::IO::Ports::SerialPort^  serialPort1;
	private: static System::IO::Ports::SerialPort^  serialPort2;
	private: static System::Windows::Forms::TextBox^  outPutTextBox;
			 //private: static System::IO::Ports::SerialPort^  serialPort1;
			 //private: static System::IO::Ports::SerialPort^  serialPort2;
			 //private: static System::Windows::Forms::TextBox^  outPutTextBox;

	private: System::Windows::Forms::TextBox^  BluetoothRecievedTextBox;
	private: System::Windows::Forms::ComboBox^  COMComboBox;

	private: System::Windows::Forms::Button^  sendButton;
	private: System::Windows::Forms::TextBox^  commandBox;
	private: System::Windows::Forms::Button^  keyboardBut;

	private: System::ComponentModel::IContainer^  components;
	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel1;
	private: System::Windows::Forms::Label^  labelSensorReadings;
	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel2;
	private: System::Windows::Forms::Label^  labelLeftUSFront;
	private: System::Windows::Forms::TextBox^  textBoxLeftUSFront;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel3;
	private: System::Windows::Forms::Label^  labelLeftUSRear;
	private: System::Windows::Forms::TextBox^  textBoxLeftUSRear;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel6;
	private: System::Windows::Forms::Label^  labelDistance;
	private: System::Windows::Forms::TextBox^  textBoxDistance;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel8;
	private: System::Windows::Forms::Label^  labelRightUS;
	private: System::Windows::Forms::TextBox^  textBoxRightUS;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel4;
	private: System::Windows::Forms::Label^  labelLaser;
	private: System::Windows::Forms::TextBox^  textBoxLaser;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel5;
	private: System::Windows::Forms::Label^  labelGyro;
	private: System::Windows::Forms::TextBox^  textBoxGyro;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel7;
	private: System::Windows::Forms::Label^  labelIR;
	private: System::Windows::Forms::TextBox^  textBoxIR;
	private: System::Windows::Forms::Button^  paintRectBut;


	protected:
		bool keyboardEnabled = false;

	private: int mapWidth;
	private: int mapHeight;
	private: int mapXCoord;
	private: int mapYCoord;
	private: int mapCols;
	private: int mapRows;
	private: Drawing::Graphics^ mapGraphics;
	private: Drawing::Graphics^ bgGraphics;
	private: Drawing::SolidBrush^ mapBrush;
	private: Drawing::SolidBrush^ bgBrush;
	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel9;
	private: System::Windows::Forms::Label^  labelPhotoDistance;
	private: System::Windows::Forms::TextBox^  textBoxPhotoDistance;
	private: System::Windows::Forms::Label^  labelUncharted;
	private: System::Windows::Forms::Label^  labelOpen;
	private: System::Windows::Forms::Label^  labelGoal;

	private: System::Windows::Forms::Label^  labelPosition;


	private: System::Windows::Forms::Label^  labelWall;


	private: array<char> ^pc_map;

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>


#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->components = (gcnew System::ComponentModel::Container());
			this->openCOMBut = (gcnew System::Windows::Forms::Button());
			this->findCOMBut = (gcnew System::Windows::Forms::Button());
			this->serialPort1 = (gcnew System::IO::Ports::SerialPort(this->components));
			this->outPutTextBox = (gcnew System::Windows::Forms::TextBox());
			this->BluetoothRecievedTextBox = (gcnew System::Windows::Forms::TextBox());
			this->COMComboBox = (gcnew System::Windows::Forms::ComboBox());
			this->serialPort2 = (gcnew System::IO::Ports::SerialPort(this->components));
			this->sendButton = (gcnew System::Windows::Forms::Button());
			this->commandBox = (gcnew System::Windows::Forms::TextBox());
			this->keyboardBut = (gcnew System::Windows::Forms::Button());
			this->flowLayoutPanel1 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelSensorReadings = (gcnew System::Windows::Forms::Label());
			this->flowLayoutPanel2 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelLeftUSFront = (gcnew System::Windows::Forms::Label());
			this->textBoxLeftUSFront = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel3 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelLeftUSRear = (gcnew System::Windows::Forms::Label());
			this->textBoxLeftUSRear = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel6 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelDistance = (gcnew System::Windows::Forms::Label());
			this->textBoxDistance = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel8 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelRightUS = (gcnew System::Windows::Forms::Label());
			this->textBoxRightUS = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel4 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelLaser = (gcnew System::Windows::Forms::Label());
			this->textBoxLaser = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel5 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelGyro = (gcnew System::Windows::Forms::Label());
			this->textBoxGyro = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel7 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelIR = (gcnew System::Windows::Forms::Label());
			this->textBoxIR = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel9 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelPhotoDistance = (gcnew System::Windows::Forms::Label());
			this->textBoxPhotoDistance = (gcnew System::Windows::Forms::TextBox());
			this->paintRectBut = (gcnew System::Windows::Forms::Button());
			this->labelUncharted = (gcnew System::Windows::Forms::Label());
			this->labelOpen = (gcnew System::Windows::Forms::Label());
			this->labelGoal = (gcnew System::Windows::Forms::Label());
			this->labelPosition = (gcnew System::Windows::Forms::Label());
			this->labelWall = (gcnew System::Windows::Forms::Label());
			this->flowLayoutPanel1->SuspendLayout();
			this->flowLayoutPanel2->SuspendLayout();
			this->flowLayoutPanel3->SuspendLayout();
			this->flowLayoutPanel6->SuspendLayout();
			this->flowLayoutPanel8->SuspendLayout();
			this->flowLayoutPanel4->SuspendLayout();
			this->flowLayoutPanel5->SuspendLayout();
			this->flowLayoutPanel7->SuspendLayout();
			this->flowLayoutPanel9->SuspendLayout();
			this->SuspendLayout();
			// 
			// openCOMBut
			// 
			this->openCOMBut->BackColor = System::Drawing::Color::CornflowerBlue;
			this->openCOMBut->FlatAppearance->BorderColor = System::Drawing::Color::CornflowerBlue;
			this->openCOMBut->FlatAppearance->MouseDownBackColor = System::Drawing::Color::RoyalBlue;
			this->openCOMBut->FlatAppearance->MouseOverBackColor = System::Drawing::Color::DodgerBlue;
			this->openCOMBut->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->openCOMBut->Location = System::Drawing::Point(325, 364);
			this->openCOMBut->Name = L"openCOMBut";
			this->openCOMBut->Size = System::Drawing::Size(113, 59);
			this->openCOMBut->TabIndex = 0;
			this->openCOMBut->Text = L"Open COM ports";
			this->openCOMBut->UseVisualStyleBackColor = false;
			this->openCOMBut->Click += gcnew System::EventHandler(this, &PC_Unit::openCOMBut_Click);
			// 
			// findCOMBut
			// 
			this->findCOMBut->BackColor = System::Drawing::Color::CornflowerBlue;
			this->findCOMBut->FlatAppearance->BorderColor = System::Drawing::Color::CornflowerBlue;
			this->findCOMBut->FlatAppearance->MouseDownBackColor = System::Drawing::Color::RoyalBlue;
			this->findCOMBut->FlatAppearance->MouseOverBackColor = System::Drawing::Color::DodgerBlue;
			this->findCOMBut->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->findCOMBut->Location = System::Drawing::Point(444, 364);
			this->findCOMBut->Name = L"findCOMBut";
			this->findCOMBut->Size = System::Drawing::Size(113, 59);
			this->findCOMBut->TabIndex = 1;
			this->findCOMBut->Text = L"Find COM ports";
			this->findCOMBut->UseVisualStyleBackColor = false;
			this->findCOMBut->Click += gcnew System::EventHandler(this, &PC_Unit::findCOMBut_Click);
			// 
			// serialPort1
			// 
			this->serialPort1->DataReceived += gcnew System::IO::Ports::SerialDataReceivedEventHandler(this, &PC_Unit::serialPort1_DataReceived);
			// 
			// outPutTextBox
			// 
			this->outPutTextBox->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->outPutTextBox->Cursor = System::Windows::Forms::Cursors::IBeam;
			this->outPutTextBox->Location = System::Drawing::Point(12, 364);
			this->outPutTextBox->Multiline = true;
			this->outPutTextBox->Name = L"outPutTextBox";
			this->outPutTextBox->ReadOnly = true;
			this->outPutTextBox->ScrollBars = System::Windows::Forms::ScrollBars::Vertical;
			this->outPutTextBox->Size = System::Drawing::Size(307, 218);
			this->outPutTextBox->TabIndex = 2;
			this->outPutTextBox->Text = L"This box shows program output.";
			// 
			// BluetoothRecievedTextBox
			// 
			this->BluetoothRecievedTextBox->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->BluetoothRecievedTextBox->ForeColor = System::Drawing::Color::Lime;
			this->BluetoothRecievedTextBox->Location = System::Drawing::Point(563, 364);
			this->BluetoothRecievedTextBox->Multiline = true;
			this->BluetoothRecievedTextBox->Name = L"BluetoothRecievedTextBox";
			this->BluetoothRecievedTextBox->ReadOnly = true;
			this->BluetoothRecievedTextBox->ScrollBars = System::Windows::Forms::ScrollBars::Vertical;
			this->BluetoothRecievedTextBox->Size = System::Drawing::Size(205, 218);
			this->BluetoothRecievedTextBox->TabIndex = 7;
			this->BluetoothRecievedTextBox->Text = L"This box shows recieved via Bluetooth.";
			// 
			// COMComboBox
			// 
			this->COMComboBox->Enabled = false;
			this->COMComboBox->FormattingEnabled = true;
			this->COMComboBox->Location = System::Drawing::Point(774, 364);
			this->COMComboBox->Name = L"COMComboBox";
			this->COMComboBox->Size = System::Drawing::Size(113, 28);
			this->COMComboBox->TabIndex = 8;
			this->COMComboBox->Tag = L"";
			// 
			// serialPort2
			// 
			this->serialPort2->DataReceived += gcnew System::IO::Ports::SerialDataReceivedEventHandler(this, &PC_Unit::serialPort2_DataReceived);
			// 
			// sendButton
			// 
			this->sendButton->BackColor = System::Drawing::Color::CornflowerBlue;
			this->sendButton->Enabled = false;
			this->sendButton->FlatAppearance->BorderColor = System::Drawing::Color::CornflowerBlue;
			this->sendButton->FlatAppearance->MouseDownBackColor = System::Drawing::Color::RoyalBlue;
			this->sendButton->FlatAppearance->MouseOverBackColor = System::Drawing::Color::DodgerBlue;
			this->sendButton->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->sendButton->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->sendButton->ForeColor = System::Drawing::SystemColors::ControlText;
			this->sendButton->Location = System::Drawing::Point(325, 526);
			this->sendButton->Name = L"sendButton";
			this->sendButton->Size = System::Drawing::Size(232, 56);
			this->sendButton->TabIndex = 9;
			this->sendButton->Text = L"Send";
			this->sendButton->UseVisualStyleBackColor = false;
			this->sendButton->Click += gcnew System::EventHandler(this, &PC_Unit::sendButton_Click);
			// 
			// commandBox
			// 
			this->commandBox->BackColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->commandBox->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->commandBox->Enabled = false;
			this->commandBox->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->commandBox->Location = System::Drawing::Point(325, 494);
			this->commandBox->Name = L"commandBox";
			this->commandBox->Size = System::Drawing::Size(232, 26);
			this->commandBox->TabIndex = 10;
			this->commandBox->Text = L"Write command here";
			// 
			// keyboardBut
			// 
			this->keyboardBut->BackColor = System::Drawing::Color::CornflowerBlue;
			this->keyboardBut->Enabled = false;
			this->keyboardBut->FlatAppearance->BorderColor = System::Drawing::Color::CornflowerBlue;
			this->keyboardBut->FlatAppearance->MouseDownBackColor = System::Drawing::Color::RoyalBlue;
			this->keyboardBut->FlatAppearance->MouseOverBackColor = System::Drawing::Color::DodgerBlue;
			this->keyboardBut->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->keyboardBut->Font = (gcnew System::Drawing::Font(L"Verdana", 8, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->keyboardBut->Location = System::Drawing::Point(325, 429);
			this->keyboardBut->Name = L"keyboardBut";
			this->keyboardBut->Size = System::Drawing::Size(113, 59);
			this->keyboardBut->TabIndex = 11;
			this->keyboardBut->Text = L"Enable keyboard";
			this->keyboardBut->UseVisualStyleBackColor = false;
			this->keyboardBut->Click += gcnew System::EventHandler(this, &PC_Unit::keyboardBut_Click);
			// 
			// flowLayoutPanel1
			// 
			this->flowLayoutPanel1->BackColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->flowLayoutPanel1->Controls->Add(this->labelSensorReadings);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel2);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel3);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel6);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel8);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel4);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel5);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel7);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel9);
			this->flowLayoutPanel1->Location = System::Drawing::Point(774, 12);
			this->flowLayoutPanel1->Name = L"flowLayoutPanel1";
			this->flowLayoutPanel1->Size = System::Drawing::Size(244, 346);
			this->flowLayoutPanel1->TabIndex = 12;
			// 
			// labelSensorReadings
			// 
			this->labelSensorReadings->AutoSize = true;
			this->labelSensorReadings->Font = (gcnew System::Drawing::Font(L"Verdana", 10, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelSensorReadings->Location = System::Drawing::Point(3, 0);
			this->labelSensorReadings->Name = L"labelSensorReadings";
			this->labelSensorReadings->Size = System::Drawing::Size(180, 25);
			this->labelSensorReadings->TabIndex = 13;
			this->labelSensorReadings->Text = L"Sensor Readings";
			// 
			// flowLayoutPanel2
			// 
			this->flowLayoutPanel2->BackColor = System::Drawing::Color::PaleTurquoise;
			this->flowLayoutPanel2->Controls->Add(this->labelLeftUSFront);
			this->flowLayoutPanel2->Controls->Add(this->textBoxLeftUSFront);
			this->flowLayoutPanel2->Location = System::Drawing::Point(3, 28);
			this->flowLayoutPanel2->Name = L"flowLayoutPanel2";
			this->flowLayoutPanel2->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel2->TabIndex = 13;
			// 
			// labelLeftUSFront
			// 
			this->labelLeftUSFront->AutoSize = true;
			this->labelLeftUSFront->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelLeftUSFront->Location = System::Drawing::Point(3, 0);
			this->labelLeftUSFront->Name = L"labelLeftUSFront";
			this->labelLeftUSFront->Size = System::Drawing::Size(105, 20);
			this->labelLeftUSFront->TabIndex = 0;
			this->labelLeftUSFront->Text = L"Left US front:";
			// 
			// textBoxLeftUSFront
			// 
			this->textBoxLeftUSFront->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxLeftUSFront->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxLeftUSFront->Location = System::Drawing::Point(3, 23);
			this->textBoxLeftUSFront->Name = L"textBoxLeftUSFront";
			this->textBoxLeftUSFront->ReadOnly = true;
			this->textBoxLeftUSFront->Size = System::Drawing::Size(105, 26);
			this->textBoxLeftUSFront->TabIndex = 1;
			// 
			// flowLayoutPanel3
			// 
			this->flowLayoutPanel3->BackColor = System::Drawing::Color::PaleTurquoise;
			this->flowLayoutPanel3->Controls->Add(this->labelLeftUSRear);
			this->flowLayoutPanel3->Controls->Add(this->textBoxLeftUSRear);
			this->flowLayoutPanel3->Location = System::Drawing::Point(124, 28);
			this->flowLayoutPanel3->Name = L"flowLayoutPanel3";
			this->flowLayoutPanel3->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel3->TabIndex = 14;
			// 
			// labelLeftUSRear
			// 
			this->labelLeftUSRear->AutoSize = true;
			this->labelLeftUSRear->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelLeftUSRear->Location = System::Drawing::Point(3, 0);
			this->labelLeftUSRear->Name = L"labelLeftUSRear";
			this->labelLeftUSRear->Size = System::Drawing::Size(100, 20);
			this->labelLeftUSRear->TabIndex = 0;
			this->labelLeftUSRear->Text = L"Left US rear:";
			// 
			// textBoxLeftUSRear
			// 
			this->textBoxLeftUSRear->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxLeftUSRear->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxLeftUSRear->Location = System::Drawing::Point(3, 23);
			this->textBoxLeftUSRear->Name = L"textBoxLeftUSRear";
			this->textBoxLeftUSRear->ReadOnly = true;
			this->textBoxLeftUSRear->Size = System::Drawing::Size(105, 22);
			this->textBoxLeftUSRear->TabIndex = 1;
			// 
			// flowLayoutPanel6
			// 
			this->flowLayoutPanel6->BackColor = System::Drawing::Color::PaleTurquoise;
			this->flowLayoutPanel6->Controls->Add(this->labelDistance);
			this->flowLayoutPanel6->Controls->Add(this->textBoxDistance);
			this->flowLayoutPanel6->Location = System::Drawing::Point(3, 106);
			this->flowLayoutPanel6->Name = L"flowLayoutPanel6";
			this->flowLayoutPanel6->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel6->TabIndex = 17;
			// 
			// labelDistance
			// 
			this->labelDistance->AutoSize = true;
			this->labelDistance->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelDistance->Location = System::Drawing::Point(3, 0);
			this->labelDistance->Name = L"labelDistance";
			this->labelDistance->Size = System::Drawing::Size(76, 20);
			this->labelDistance->TabIndex = 0;
			this->labelDistance->Text = L"Travelled:";
			// 
			// textBoxDistance
			// 
			this->textBoxDistance->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxDistance->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxDistance->Location = System::Drawing::Point(3, 23);
			this->textBoxDistance->Name = L"textBoxDistance";
			this->textBoxDistance->ReadOnly = true;
			this->textBoxDistance->Size = System::Drawing::Size(105, 28);
			this->textBoxDistance->TabIndex = 1;
			// 
			// flowLayoutPanel8
			// 
			this->flowLayoutPanel8->BackColor = System::Drawing::Color::PaleTurquoise;
			this->flowLayoutPanel8->Controls->Add(this->labelRightUS);
			this->flowLayoutPanel8->Controls->Add(this->textBoxRightUS);
			this->flowLayoutPanel8->Location = System::Drawing::Point(124, 106);
			this->flowLayoutPanel8->Name = L"flowLayoutPanel8";
			this->flowLayoutPanel8->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel8->TabIndex = 19;
			// 
			// labelRightUS
			// 
			this->labelRightUS->AutoSize = true;
			this->labelRightUS->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelRightUS->Location = System::Drawing::Point(3, 0);
			this->labelRightUS->Name = L"labelRightUS";
			this->labelRightUS->Size = System::Drawing::Size(74, 20);
			this->labelRightUS->TabIndex = 0;
			this->labelRightUS->Text = L"Right US";
			// 
			// textBoxRightUS
			// 
			this->textBoxRightUS->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxRightUS->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxRightUS->Location = System::Drawing::Point(3, 23);
			this->textBoxRightUS->Name = L"textBoxRightUS";
			this->textBoxRightUS->ReadOnly = true;
			this->textBoxRightUS->Size = System::Drawing::Size(105, 25);
			this->textBoxRightUS->TabIndex = 1;
			// 
			// flowLayoutPanel4
			// 
			this->flowLayoutPanel4->BackColor = System::Drawing::Color::PaleTurquoise;
			this->flowLayoutPanel4->Controls->Add(this->labelLaser);
			this->flowLayoutPanel4->Controls->Add(this->textBoxLaser);
			this->flowLayoutPanel4->Location = System::Drawing::Point(3, 184);
			this->flowLayoutPanel4->Name = L"flowLayoutPanel4";
			this->flowLayoutPanel4->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel4->TabIndex = 15;
			// 
			// labelLaser
			// 
			this->labelLaser->AutoSize = true;
			this->labelLaser->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelLaser->Location = System::Drawing::Point(3, 0);
			this->labelLaser->Name = L"labelLaser";
			this->labelLaser->Size = System::Drawing::Size(53, 20);
			this->labelLaser->TabIndex = 0;
			this->labelLaser->Text = L"Laser:";
			// 
			// textBoxLaser
			// 
			this->textBoxLaser->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxLaser->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxLaser->Location = System::Drawing::Point(3, 23);
			this->textBoxLaser->Name = L"textBoxLaser";
			this->textBoxLaser->ReadOnly = true;
			this->textBoxLaser->Size = System::Drawing::Size(105, 19);
			this->textBoxLaser->TabIndex = 1;
			// 
			// flowLayoutPanel5
			// 
			this->flowLayoutPanel5->BackColor = System::Drawing::Color::PaleTurquoise;
			this->flowLayoutPanel5->Controls->Add(this->labelGyro);
			this->flowLayoutPanel5->Controls->Add(this->textBoxGyro);
			this->flowLayoutPanel5->Location = System::Drawing::Point(124, 184);
			this->flowLayoutPanel5->Name = L"flowLayoutPanel5";
			this->flowLayoutPanel5->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel5->TabIndex = 16;
			// 
			// labelGyro
			// 
			this->labelGyro->AutoSize = true;
			this->labelGyro->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelGyro->Location = System::Drawing::Point(3, 0);
			this->labelGyro->Name = L"labelGyro";
			this->labelGyro->Size = System::Drawing::Size(47, 20);
			this->labelGyro->TabIndex = 0;
			this->labelGyro->Text = L"Gyro:";
			// 
			// textBoxGyro
			// 
			this->textBoxGyro->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxGyro->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxGyro->Location = System::Drawing::Point(3, 23);
			this->textBoxGyro->Name = L"textBoxGyro";
			this->textBoxGyro->ReadOnly = true;
			this->textBoxGyro->Size = System::Drawing::Size(105, 19);
			this->textBoxGyro->TabIndex = 1;
			// 
			// flowLayoutPanel7
			// 
			this->flowLayoutPanel7->BackColor = System::Drawing::Color::PaleTurquoise;
			this->flowLayoutPanel7->Controls->Add(this->labelIR);
			this->flowLayoutPanel7->Controls->Add(this->textBoxIR);
			this->flowLayoutPanel7->Location = System::Drawing::Point(3, 262);
			this->flowLayoutPanel7->Name = L"flowLayoutPanel7";
			this->flowLayoutPanel7->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel7->TabIndex = 18;
			// 
			// labelIR
			// 
			this->labelIR->AutoSize = true;
			this->labelIR->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelIR->Location = System::Drawing::Point(3, 0);
			this->labelIR->Name = L"labelIR";
			this->labelIR->Size = System::Drawing::Size(69, 20);
			this->labelIR->TabIndex = 0;
			this->labelIR->Text = L"Infrared:";
			// 
			// textBoxIR
			// 
			this->textBoxIR->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxIR->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxIR->Location = System::Drawing::Point(3, 23);
			this->textBoxIR->Name = L"textBoxIR";
			this->textBoxIR->ReadOnly = true;
			this->textBoxIR->Size = System::Drawing::Size(105, 19);
			this->textBoxIR->TabIndex = 1;
			// 
			// flowLayoutPanel9
			// 
			this->flowLayoutPanel9->BackColor = System::Drawing::Color::PaleTurquoise;
			this->flowLayoutPanel9->Controls->Add(this->labelPhotoDistance);
			this->flowLayoutPanel9->Controls->Add(this->textBoxPhotoDistance);
			this->flowLayoutPanel9->Location = System::Drawing::Point(124, 262);
			this->flowLayoutPanel9->Name = L"flowLayoutPanel9";
			this->flowLayoutPanel9->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel9->TabIndex = 20;
			// 
			// labelPhotoDistance
			// 
			this->labelPhotoDistance->AutoSize = true;
			this->labelPhotoDistance->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelPhotoDistance->Location = System::Drawing::Point(3, 0);
			this->labelPhotoDistance->Name = L"labelPhotoDistance";
			this->labelPhotoDistance->Size = System::Drawing::Size(76, 40);
			this->labelPhotoDistance->TabIndex = 0;
			this->labelPhotoDistance->Text = L"Photo Distance:";
			// 
			// textBoxPhotoDistance
			// 
			this->textBoxPhotoDistance->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxPhotoDistance->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxPhotoDistance->Location = System::Drawing::Point(3, 43);
			this->textBoxPhotoDistance->Name = L"textBoxPhotoDistance";
			this->textBoxPhotoDistance->ReadOnly = true;
			this->textBoxPhotoDistance->Size = System::Drawing::Size(105, 19);
			this->textBoxPhotoDistance->TabIndex = 1;
			// 
			// paintRectBut
			// 
			this->paintRectBut->BackColor = System::Drawing::Color::CornflowerBlue;
			this->paintRectBut->Cursor = System::Windows::Forms::Cursors::Arrow;
			this->paintRectBut->FlatAppearance->BorderColor = System::Drawing::Color::CornflowerBlue;
			this->paintRectBut->FlatAppearance->MouseDownBackColor = System::Drawing::Color::RoyalBlue;
			this->paintRectBut->FlatAppearance->MouseOverBackColor = System::Drawing::Color::DodgerBlue;
			this->paintRectBut->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->paintRectBut->ForeColor = System::Drawing::Color::Black;
			this->paintRectBut->Location = System::Drawing::Point(444, 429);
			this->paintRectBut->Name = L"paintRectBut";
			this->paintRectBut->Size = System::Drawing::Size(113, 59);
			this->paintRectBut->TabIndex = 13;
			this->paintRectBut->Text = L"Paint rectangle";
			this->paintRectBut->UseVisualStyleBackColor = false;
			this->paintRectBut->Click += gcnew System::EventHandler(this, &PC_Unit::paintRectBut_Click);
			// 
			// labelUncharted
			// 
			this->labelUncharted->AutoSize = true;
			this->labelUncharted->Location = System::Drawing::Point(680, 38);
			this->labelUncharted->Name = L"labelUncharted";
			this->labelUncharted->Size = System::Drawing::Size(81, 20);
			this->labelUncharted->TabIndex = 14;
			this->labelUncharted->Text = L"uncharted";
			// 
			// labelOpen
			// 
			this->labelOpen->AutoSize = true;
			this->labelOpen->Location = System::Drawing::Point(680, 58);
			this->labelOpen->Name = L"labelOpen";
			this->labelOpen->Size = System::Drawing::Size(45, 20);
			this->labelOpen->TabIndex = 15;
			this->labelOpen->Text = L"open";
			// 
			// labelGoal
			// 
			this->labelGoal->AutoSize = true;
			this->labelGoal->Location = System::Drawing::Point(680, 98);
			this->labelGoal->Name = L"labelGoal";
			this->labelGoal->Size = System::Drawing::Size(39, 20);
			this->labelGoal->TabIndex = 16;
			this->labelGoal->Text = L"goal";
			// 
			// labelPosition
			// 
			this->labelPosition->AutoSize = true;
			this->labelPosition->Location = System::Drawing::Point(680, 118);
			this->labelPosition->Name = L"labelPosition";
			this->labelPosition->Size = System::Drawing::Size(124, 20);
			this->labelPosition->TabIndex = 17;
			this->labelPosition->Text = L"Wall-YI postition";
			// 
			// labelWall
			// 
			this->labelWall->AutoSize = true;
			this->labelWall->Location = System::Drawing::Point(680, 78);
			this->labelWall->Name = L"labelWall";
			this->labelWall->Size = System::Drawing::Size(35, 20);
			this->labelWall->TabIndex = 18;
			this->labelWall->Text = L"wall";
			// 
			// PC_Unit
			// 
			this->AcceptButton = this->openCOMBut;
			this->AutoScaleDimensions = System::Drawing::SizeF(9, 20);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->AutoSize = true;
			this->BackColor = System::Drawing::Color::GhostWhite;
			this->ClientSize = System::Drawing::Size(1113, 730);
			this->Controls->Add(this->labelWall);
			this->Controls->Add(this->labelPosition);
			this->Controls->Add(this->labelGoal);
			this->Controls->Add(this->labelOpen);
			this->Controls->Add(this->labelUncharted);
			this->Controls->Add(this->paintRectBut);
			this->Controls->Add(this->flowLayoutPanel1);
			this->Controls->Add(this->keyboardBut);
			this->Controls->Add(this->commandBox);
			this->Controls->Add(this->sendButton);
			this->Controls->Add(this->COMComboBox);
			this->Controls->Add(this->BluetoothRecievedTextBox);
			this->Controls->Add(this->findCOMBut);
			this->Controls->Add(this->openCOMBut);
			this->Controls->Add(this->outPutTextBox);
			this->Cursor = System::Windows::Forms::Cursors::Arrow;
			this->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->Name = L"PC_Unit";
			this->Text = L"PC_Unit";
			this->WindowState = System::Windows::Forms::FormWindowState::Maximized;
			this->flowLayoutPanel1->ResumeLayout(false);
			this->flowLayoutPanel1->PerformLayout();
			this->flowLayoutPanel2->ResumeLayout(false);
			this->flowLayoutPanel2->PerformLayout();
			this->flowLayoutPanel3->ResumeLayout(false);
			this->flowLayoutPanel3->PerformLayout();
			this->flowLayoutPanel6->ResumeLayout(false);
			this->flowLayoutPanel6->PerformLayout();
			this->flowLayoutPanel8->ResumeLayout(false);
			this->flowLayoutPanel8->PerformLayout();
			this->flowLayoutPanel4->ResumeLayout(false);
			this->flowLayoutPanel4->PerformLayout();
			this->flowLayoutPanel5->ResumeLayout(false);
			this->flowLayoutPanel5->PerformLayout();
			this->flowLayoutPanel7->ResumeLayout(false);
			this->flowLayoutPanel7->PerformLayout();
			this->flowLayoutPanel9->ResumeLayout(false);
			this->flowLayoutPanel9->PerformLayout();
			this->ResumeLayout(false);
			this->PerformLayout();

		}
		void InitializeOther(void) {
			this->mapCols = 31;
			this->mapRows = 17;
			this->mapWidth = mapCols * 20;
			this->mapHeight = mapRows * 20;
			this->mapXCoord = 15;
			this->mapYCoord = 15;
			this->mapGraphics = this->CreateGraphics();
			this->bgGraphics = this->CreateGraphics();
			this->mapBrush = gcnew Drawing::SolidBrush(Color::DeepPink);
		}
#pragma endregion
		delegate void writeRecievedDelegateString(String^ s);
		delegate void writeRecievedDelegateInt(int data);
		delegate void sensorTextboxDelegate2(int data);
		delegate void sensorTextboxDelegate(System::Windows::Forms::TextBox^ textbox, int data);
		delegate void keyboardButDelegate(bool enabled);

	private: System::Void paintMapRect(char type, int rowIndex, int colIndex) {
		switch (type) {
		case 'o':
			mapBrush->Color = Color::Aquamarine;
			//open
			break;
		case 'u':
			mapBrush->Color = Color::GhostWhite;
			//uncharted
			break;
		case 'w':
			mapBrush->Color = Color::DarkGray;
			//wall
			break;
		case 'g':
			mapBrush->Color = Color::SteelBlue;
			//goal
			break;
		case 'p':
			mapBrush->Color = Color::Salmon;
			//position of robot
			break;
		default:
			mapBrush->Color = Color::Magenta;
			//Something went wrong
			break;
		}
		int tmpX = mapXCoord + colIndex * mapWidth / (mapCols);
		int tmpY = mapYCoord + rowIndex * mapHeight / (mapRows);
		int tmpWidth = (int)(0.9 * (float)mapWidth / mapCols);
		int tmpHeight = (int)(0.9 * (float)mapHeight / mapRows);
		mapGraphics->FillRectangle(mapBrush, tmpX, tmpY, tmpWidth, tmpHeight);
	}
	private: System::Void paintMapBackground()
	{
		Drawing::SolidBrush ^tmpBrush = gcnew Drawing::SolidBrush(Color::LightBlue);
		this->bgGraphics->FillRectangle(tmpBrush, mapXCoord - 3, mapYCoord - 3, mapWidth + 4, mapHeight + 4);
		int newX = mapXCoord + 32 * mapWidth / (mapCols);
		int newY = mapYCoord + 1 * mapHeight / (mapRows);
		int newWidth = (int)(0.9 * (float)mapWidth / mapCols);
		int newHeight = (int)(0.9 * (float)mapHeight / mapRows);
		bgGraphics->FillRectangle(tmpBrush, newX - 1, newY - 1, newWidth + 2, newHeight + 2);
		paintMapRect('u', 1, 32);
		paintMapRect('w', 2, 32);
		paintMapRect('o', 3, 32);
		paintMapRect('p', 4, 32);
		paintMapRect('g', 5, 32);
	}
	public: static void send(String ^s)
	{
		PC_Unit::serialPort2->Write(s);
	}
	private: void writeRecieved(String ^s)
	{
		if (this->BluetoothRecievedTextBox->InvokeRequired)
		{
			writeRecievedDelegateString^ d =
				gcnew writeRecievedDelegateString(this, &PC_Unit::writeRecieved);
			this->Invoke(d, gcnew array<Object^> { s });
		}
		else
		{
			this->BluetoothRecievedTextBox->Text += (s + "\n");
		}
	}
	private: void writeRecieved(int data)
	{
		if (this->BluetoothRecievedTextBox->InvokeRequired)
		{
			writeRecievedDelegateInt^ d =
				gcnew writeRecievedDelegateInt(this, &PC_Unit::writeRecieved);
			this->Invoke(d, gcnew array<Object^> { data });
		}
		else
		{
			this->BluetoothRecievedTextBox->Text += data;
		}
	}
	private: void setKeyboardButEnable(bool enabled)
	{
		if (this->keyboardBut->InvokeRequired)
		{
			keyboardButDelegate^ d =
				gcnew keyboardButDelegate(this, &PC_Unit::setKeyboardButEnable);
			this->Invoke(d, gcnew array<Object^>{enabled});
		}
		else
		{
			this->keyboardBut->Enabled = enabled;
		}
	}
	private: void writeSensorData(System::Windows::Forms::TextBox^ textbox, int data)
	{
		if (textbox->InvokeRequired)
		{
			sensorTextboxDelegate^ d =
				gcnew sensorTextboxDelegate(this, &PC_Unit::writeSensorData);
			this->Invoke(d, gcnew array<Object^> { textbox, data });
		}
		else
		{
			textbox->Text = ""; // Ugly		
			textbox->Text += data;
		}
	}
	public: static void writeToUser(String ^s)
	{
		PC_Unit::outPutTextBox->ForeColor = Color::Blue;
		PC_Unit::outPutTextBox->Text += "\r\n-> ";
		PC_Unit::outPutTextBox->ForeColor = Color::Black;
		PC_Unit::outPutTextBox->Text += s;
	}
	private: void findPorts(void)
	{
		array<Object^>^ objectArray = SerialPort::GetPortNames();
		this->COMComboBox->Items->AddRange(objectArray);
	}
	private: System::Void openCOMBut_Click(System::Object^  sender, System::EventArgs^  e)
	{
		paintMapBackground();
		try {
			writeToUser("Searching for COM ports...");
			array<Object^>^ objectArray = SerialPort::GetPortNames();
			this->COMComboBox->Items->Clear();
			this->COMComboBox->Items->AddRange(objectArray);
			writeToUser("COM ports added to the cool combo box");
			SerialPort ^tempSP;
			tempSP = serialPort1;
			if (!tempSP->IsOpen)
			{
				tempSP->PortName = objectArray[0]->ToString();
				tempSP->BaudRate = 115200;
				tempSP->Open();
				writeToUser(tempSP->PortName + " is opened");
			}
			tempSP = serialPort2;
			if (!tempSP->IsOpen)
			{
				tempSP->PortName = objectArray[1]->ToString();
				tempSP->BaudRate = 115200;
				tempSP->Open();
				writeToUser(tempSP->PortName + " is opened");
			}
			this->keyboardBut->Enabled::set(true);
			this->sendButton->Enabled::set(true);
			this->commandBox->Enabled::set(true);
			this->COMComboBox->Enabled::set(true);

			Sleep(10);
			// Tell AVR, BT-link is up
			send("e");
		}
		catch (System::IO::IOException^)
		{
			writeToUser("Failed to open COM ports, try again.");
		}
	}
	private: System::Void findCOMBut_Click(System::Object^  sender, System::EventArgs^  e) {
		writeToUser("Searching for COM ports...");
		findPorts();
		writeToUser("\r\nCOM ports added to the cool combo box");
	}
	private: System::Void sendButton_Click(System::Object^  sender, System::EventArgs^  e) {
		String ^command = this->commandBox->Text;
		if (this->serialPort2->IsOpen)
		{
			send(command);
			writeToUser("\"" + command + "\"" + " sent");
		}
		else
		{
			writeToUser("Serial port aint open bro");
		}
	}
	private: System::Void keyboardBut_Click(System::Object^  sender, System::EventArgs^  e);
	private: System::Void serialPort1_DataReceived(System::Object^  sender, System::IO::Ports::SerialDataReceivedEventArgs^  e) {
		/*writeRecieved("I hear smthn!");
		String ^recieved = serialPort1->ReadExisting();
		writeRecieved(recieved);*/
		//this->BluetoothRecievedTextBox->Text += "->"+"Data recieved";
		/*PC_Unit::BluetoothRecievedTextBox->Text += "->" + "Data recieved";*/
	}
	private: void ReadMap()
	{
		char temp;
		for (int i = 0; i < mapRows; i++)
		{
			for (int j = 0; j < mapCols; j++)
			{
				temp = serialPort2->ReadByte();
				if (temp == this->pc_map[j + i * mapCols])
				{
					// Do nothing		
				}
				else
				{
					this->pc_map[j + i * mapCols] = temp;
					paintMapRect(temp, i, j);
				}
			}
		}
	}
	private: int Read16SP2()
	{
		int dataread = serialPort2->ReadByte();		// Read higher byte of uint16
		int lowerbyte = serialPort2->ReadByte();	// Read lower byte of uint16
		dataread = dataread << 8; // Left-shift by 8 bits to make room for lower byte
		dataread += lowerbyte;
		return dataread;
	}
	private: void ReadSensor()
	{
		//receive order: front left us, back left us, aheadpointing us, right, distance photo, gyro, ir
		writeSensorData(this->textBoxLeftUSFront, Read16SP2());
		writeSensorData(this->textBoxLeftUSRear, Read16SP2());
		writeSensorData(this->textBoxLaser, Read16SP2());
		writeSensorData(this->textBoxRightUS, Read16SP2());
		writeSensorData(this->textBoxDistance, Read16SP2());
		writeSensorData(this->textBoxGyro, serialPort2->ReadByte());
		writeSensorData(this->textBoxIR, serialPort2->ReadByte());
	}
	private: System::Void serialPort2_DataReceived(System::Object^  sender, System::IO::Ports::SerialDataReceivedEventArgs^  e) {
		char header = serialPort2->ReadByte();
		switch (header)
		{
		case 'r':
			//remote_control on		
			writeRecieved("Case r");
			setKeyboardButEnable(true);
			break;
		case 'n':
			//remote_control off
			writeRecieved("Case n");
			setKeyboardButEnable(false);
			break;
		case 's':
			ReadSensor();
			//sensor_data
			break;
		case 'm':
			//Sleep(200);

			ReadMap();
			//map data
			break;
		default:
			//do nothing
			break;
		}
	}
	private: System::Void paintRectBut_Click(System::Object^  sender, System::EventArgs^  e) {

		char testMap[15][29];
		for (int i = 0; i < 15; i++) {
			for (int j = 0; j < 29; j++)
				if (round(i / (j + 1)) <= 0) {
					testMap[i][j] = 'u';
				}
				else if (round(i / (j + 1)) <= 3) {
					testMap[i][j] = 'w';
				}
				else {
					testMap[i][j] = 'o';
				}
		}
		testMap[13][2] = 'g';
		testMap[11][2] = 'r';
		Drawing::Pen ^pen = gcnew Drawing::Pen(Color::DarkSlateGray, 3.0);
		//mapGraphics->DrawRectangle(pen, 12, 12, mapWidth + 3, mapHeight + 3);

		for (int i = 0; i < 15; i++) {
			for (int j = 0; j < 29; j++) {
				paintMapRect(testMap[i][j], i, j);
			}
		}
	}
	};
}
#endif // !PC_UNIT_H
