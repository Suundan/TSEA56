#ifndef PC_UNIT_H
#define PC_UNIT_H

#include <Windows.h>
#include <iostream>
#include <string>

#pragma once

namespace CppWinForm1 {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace System::IO::Ports;

	/// <summary>
	/// Summary for PC_Unit
	/// </summary>
	public ref class PC_Unit : public System::Windows::Forms::Form
	{
	public:
		PC_Unit(void)
		{
			InitializeComponent();
			InitializeOther();
			pc_map = gcnew array<char>(mapCols * mapRows);
			pc_map_new = gcnew array<char>(mapCols * mapRows);
			//
			//TODO: Add the constructor code here
			//
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~PC_Unit()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Button^  openCOMBut;
	private: System::Windows::Forms::Button^  disconnectBut;
	private: static System::IO::Ports::SerialPort^  serialPort1;
	private: static System::IO::Ports::SerialPort^  serialPort2;
	private: static System::Windows::Forms::TextBox^  outPutTextBox;
			 // Replace the three rows of code above with the commented code below to make the code work

			 //private: static System::IO::Ports::SerialPort^  serialPort1;
			 //private: static System::IO::Ports::SerialPort^  serialPort2;
			 //private: static System::Windows::Forms::TextBox^  outPutTextBox;

	private: System::Windows::Forms::TextBox^  BluetoothRecievedTextBox;
	private: System::Windows::Forms::ComboBox^  COMComboBox;

	private: System::Windows::Forms::Button^  sendButton;
	private: System::Windows::Forms::TextBox^  commandBox;
	private: System::Windows::Forms::Button^  keyboardBut;

	private: System::ComponentModel::IContainer^  components;
	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel1;
	private: System::Windows::Forms::Label^  labelSensorReadings;
	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel2;
	private: System::Windows::Forms::Label^  labelLeftIRFront;
	private: System::Windows::Forms::TextBox^  textBoxLeftIRFront;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel3;
	private: System::Windows::Forms::Label^  labelLeftIRRear;
	private: System::Windows::Forms::TextBox^  textBoxLeftIRRear;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel6;
	private: System::Windows::Forms::Label^  labelIRRight;
	private: System::Windows::Forms::TextBox^  textBoxIRRight;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel8;
	private: System::Windows::Forms::Label^  labelIRLeft;
	private: System::Windows::Forms::TextBox^  textBoxIRLeft;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel4;
	private: System::Windows::Forms::Label^  labelIRFront;
	private: System::Windows::Forms::TextBox^  textBoxIRFront;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel5;
	private: System::Windows::Forms::Label^  labelGyro;
	private: System::Windows::Forms::TextBox^  textBoxGyro;

	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel7;
	private: System::Windows::Forms::Label^  labelIRGoal;
	private: System::Windows::Forms::TextBox^  textBoxGoalDetector;
	private: System::Windows::Forms::Button^  resetBut;



	protected:
		bool keyboardEnabled = false;
		bool readHeader;
		bool mapBackgroundPainted = false;

	private: int mapWidth;
	private: int mapHeight;
	private: int mapXCoord;
	private: int mapYCoord;
	private: int mapCols;
	private: int mapRows;
	private: Drawing::Graphics^ mapGraphics;
	private: Drawing::Graphics^ bgGraphics;
	private: Drawing::SolidBrush^ mapBrush;
	private: Drawing::SolidBrush^ bgBrush;
	private: System::Windows::Forms::FlowLayoutPanel^  flowLayoutPanel9;
	private: System::Windows::Forms::Label^  labelPhotoDistance;
	private: System::Windows::Forms::TextBox^  textBoxPhotoDistance;
	private: System::Windows::Forms::Label^  labelUncharted;
	private: System::Windows::Forms::Label^  labelOpen;
	private: System::Windows::Forms::Label^  labelGoal;

	private: System::Windows::Forms::Label^  labelPosition;


	private: System::Windows::Forms::Label^  labelWall;
	private: System::Windows::Forms::Label^  labelCOMComboBox;
	private: System::Windows::Forms::ContextMenuStrip^  contextMenuStrip1;
	private: System::Windows::Forms::TextBox^  textBox1;
	private: System::Windows::Forms::CheckedListBox^  modeCheckedListBox;
	private: System::Windows::Forms::PictureBox^  pictureBox1;
	private: System::Windows::Forms::Panel^  panelSensRecieved;
	private: System::Windows::Forms::Panel^  panelMapRecieved;
	private: System::Windows::Forms::Label^  labelDecisionPoint;
	private: System::Windows::Forms::Label^  labelVisited;

	private: array<char> ^pc_map;
	private: System::Windows::Forms::Label^  labelStart;
	private: System::Windows::Forms::Label^  labelRoute;
	private: array<char> ^pc_map_new;

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>


#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->components = (gcnew System::ComponentModel::Container());
			System::ComponentModel::ComponentResourceManager^  resources = (gcnew System::ComponentModel::ComponentResourceManager(PC_Unit::typeid));
			this->openCOMBut = (gcnew System::Windows::Forms::Button());
			this->disconnectBut = (gcnew System::Windows::Forms::Button());
			this->serialPort1 = (gcnew System::IO::Ports::SerialPort(this->components));
			this->outPutTextBox = (gcnew System::Windows::Forms::TextBox());
			this->BluetoothRecievedTextBox = (gcnew System::Windows::Forms::TextBox());
			this->COMComboBox = (gcnew System::Windows::Forms::ComboBox());
			this->serialPort2 = (gcnew System::IO::Ports::SerialPort(this->components));
			this->sendButton = (gcnew System::Windows::Forms::Button());
			this->commandBox = (gcnew System::Windows::Forms::TextBox());
			this->keyboardBut = (gcnew System::Windows::Forms::Button());
			this->flowLayoutPanel1 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelSensorReadings = (gcnew System::Windows::Forms::Label());
			this->flowLayoutPanel2 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelLeftIRFront = (gcnew System::Windows::Forms::Label());
			this->textBoxLeftIRFront = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel3 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelLeftIRRear = (gcnew System::Windows::Forms::Label());
			this->textBoxLeftIRRear = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel8 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelIRLeft = (gcnew System::Windows::Forms::Label());
			this->textBoxIRLeft = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel6 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelIRRight = (gcnew System::Windows::Forms::Label());
			this->textBoxIRRight = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel4 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelIRFront = (gcnew System::Windows::Forms::Label());
			this->textBoxIRFront = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel9 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelPhotoDistance = (gcnew System::Windows::Forms::Label());
			this->textBoxPhotoDistance = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel5 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelGyro = (gcnew System::Windows::Forms::Label());
			this->textBoxGyro = (gcnew System::Windows::Forms::TextBox());
			this->flowLayoutPanel7 = (gcnew System::Windows::Forms::FlowLayoutPanel());
			this->labelIRGoal = (gcnew System::Windows::Forms::Label());
			this->textBoxGoalDetector = (gcnew System::Windows::Forms::TextBox());
			this->panelSensRecieved = (gcnew System::Windows::Forms::Panel());
			this->panelMapRecieved = (gcnew System::Windows::Forms::Panel());
			this->resetBut = (gcnew System::Windows::Forms::Button());
			this->labelUncharted = (gcnew System::Windows::Forms::Label());
			this->labelOpen = (gcnew System::Windows::Forms::Label());
			this->labelGoal = (gcnew System::Windows::Forms::Label());
			this->labelPosition = (gcnew System::Windows::Forms::Label());
			this->labelWall = (gcnew System::Windows::Forms::Label());
			this->labelCOMComboBox = (gcnew System::Windows::Forms::Label());
			this->contextMenuStrip1 = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->textBox1 = (gcnew System::Windows::Forms::TextBox());
			this->modeCheckedListBox = (gcnew System::Windows::Forms::CheckedListBox());
			this->pictureBox1 = (gcnew System::Windows::Forms::PictureBox());
			this->labelDecisionPoint = (gcnew System::Windows::Forms::Label());
			this->labelVisited = (gcnew System::Windows::Forms::Label());
			this->labelStart = (gcnew System::Windows::Forms::Label());
			this->labelRoute = (gcnew System::Windows::Forms::Label());
			this->flowLayoutPanel1->SuspendLayout();
			this->flowLayoutPanel2->SuspendLayout();
			this->flowLayoutPanel3->SuspendLayout();
			this->flowLayoutPanel8->SuspendLayout();
			this->flowLayoutPanel6->SuspendLayout();
			this->flowLayoutPanel4->SuspendLayout();
			this->flowLayoutPanel9->SuspendLayout();
			this->flowLayoutPanel5->SuspendLayout();
			this->flowLayoutPanel7->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->pictureBox1))->BeginInit();
			this->SuspendLayout();
			// 
			// openCOMBut
			// 
			this->openCOMBut->BackColor = System::Drawing::Color::CornflowerBlue;
			this->openCOMBut->FlatAppearance->BorderColor = System::Drawing::Color::CornflowerBlue;
			this->openCOMBut->FlatAppearance->MouseDownBackColor = System::Drawing::Color::RoyalBlue;
			this->openCOMBut->FlatAppearance->MouseOverBackColor = System::Drawing::Color::DodgerBlue;
			this->openCOMBut->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->openCOMBut->Location = System::Drawing::Point(340, 364);
			this->openCOMBut->Name = L"openCOMBut";
			this->openCOMBut->Size = System::Drawing::Size(113, 59);
			this->openCOMBut->TabIndex = 0;
			this->openCOMBut->Text = L"Open COM ports";
			this->openCOMBut->UseVisualStyleBackColor = false;
			this->openCOMBut->Click += gcnew System::EventHandler(this, &PC_Unit::openCOMBut_Click);
			// 
			// disconnectBut
			// 
			this->disconnectBut->BackColor = System::Drawing::Color::CornflowerBlue;
			this->disconnectBut->Enabled = false;
			this->disconnectBut->FlatAppearance->BorderColor = System::Drawing::Color::CornflowerBlue;
			this->disconnectBut->FlatAppearance->MouseDownBackColor = System::Drawing::Color::RoyalBlue;
			this->disconnectBut->FlatAppearance->MouseOverBackColor = System::Drawing::Color::DodgerBlue;
			this->disconnectBut->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->disconnectBut->Location = System::Drawing::Point(459, 364);
			this->disconnectBut->Name = L"disconnectBut";
			this->disconnectBut->Size = System::Drawing::Size(113, 59);
			this->disconnectBut->TabIndex = 1;
			this->disconnectBut->Text = L"Close COM Ports";
			this->disconnectBut->UseVisualStyleBackColor = false;
			this->disconnectBut->Click += gcnew System::EventHandler(this, &PC_Unit::disconnectBut_Click);
			// 
			// serialPort1
			// 
			this->serialPort1->DataReceived += gcnew System::IO::Ports::SerialDataReceivedEventHandler(this, &PC_Unit::serialPort1_DataReceived);
			// 
			// outPutTextBox
			// 
			this->outPutTextBox->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->outPutTextBox->Cursor = System::Windows::Forms::Cursors::IBeam;
			this->outPutTextBox->Location = System::Drawing::Point(12, 364);
			this->outPutTextBox->Multiline = true;
			this->outPutTextBox->Name = L"outPutTextBox";
			this->outPutTextBox->ReadOnly = true;
			this->outPutTextBox->ScrollBars = System::Windows::Forms::ScrollBars::Vertical;
			this->outPutTextBox->Size = System::Drawing::Size(322, 218);
			this->outPutTextBox->TabIndex = 2;
			this->outPutTextBox->Text = L"This box shows program output.";
			// 
			// BluetoothRecievedTextBox
			// 
			this->BluetoothRecievedTextBox->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->BluetoothRecievedTextBox->ForeColor = System::Drawing::Color::Lime;
			this->BluetoothRecievedTextBox->Location = System::Drawing::Point(578, 364);
			this->BluetoothRecievedTextBox->Multiline = true;
			this->BluetoothRecievedTextBox->Name = L"BluetoothRecievedTextBox";
			this->BluetoothRecievedTextBox->ReadOnly = true;
			this->BluetoothRecievedTextBox->ScrollBars = System::Windows::Forms::ScrollBars::Vertical;
			this->BluetoothRecievedTextBox->Size = System::Drawing::Size(322, 218);
			this->BluetoothRecievedTextBox->TabIndex = 7;
			this->BluetoothRecievedTextBox->Text = L"This box shows recieved via Bluetooth.";
			// 
			// COMComboBox
			// 
			this->COMComboBox->Enabled = false;
			this->COMComboBox->FormattingEnabled = true;
			this->COMComboBox->Location = System::Drawing::Point(906, 386);
			this->COMComboBox->Name = L"COMComboBox";
			this->COMComboBox->Size = System::Drawing::Size(112, 28);
			this->COMComboBox->TabIndex = 8;
			this->COMComboBox->Tag = L"";
			// 
			// serialPort2
			// 
			this->serialPort2->DataReceived += gcnew System::IO::Ports::SerialDataReceivedEventHandler(this, &PC_Unit::serialPort2_DataReceived);
			// 
			// sendButton
			// 
			this->sendButton->BackColor = System::Drawing::Color::CornflowerBlue;
			this->sendButton->Enabled = false;
			this->sendButton->FlatAppearance->BorderColor = System::Drawing::Color::CornflowerBlue;
			this->sendButton->FlatAppearance->MouseDownBackColor = System::Drawing::Color::RoyalBlue;
			this->sendButton->FlatAppearance->MouseOverBackColor = System::Drawing::Color::DodgerBlue;
			this->sendButton->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->sendButton->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->sendButton->ForeColor = System::Drawing::SystemColors::ControlText;
			this->sendButton->Location = System::Drawing::Point(340, 526);
			this->sendButton->Name = L"sendButton";
			this->sendButton->Size = System::Drawing::Size(232, 56);
			this->sendButton->TabIndex = 9;
			this->sendButton->Text = L"Send";
			this->sendButton->UseVisualStyleBackColor = false;
			this->sendButton->Click += gcnew System::EventHandler(this, &PC_Unit::sendButton_Click);
			// 
			// commandBox
			// 
			this->commandBox->BackColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->commandBox->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->commandBox->Enabled = false;
			this->commandBox->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->commandBox->Location = System::Drawing::Point(340, 494);
			this->commandBox->Name = L"commandBox";
			this->commandBox->Size = System::Drawing::Size(232, 26);
			this->commandBox->TabIndex = 10;
			this->commandBox->Text = L"Write command here";
			this->commandBox->Click += gcnew System::EventHandler(this, &PC_Unit::commandBox_Click);
			// 
			// keyboardBut
			// 
			this->keyboardBut->BackColor = System::Drawing::Color::CornflowerBlue;
			this->keyboardBut->Enabled = false;
			this->keyboardBut->FlatAppearance->BorderColor = System::Drawing::Color::CornflowerBlue;
			this->keyboardBut->FlatAppearance->MouseDownBackColor = System::Drawing::Color::RoyalBlue;
			this->keyboardBut->FlatAppearance->MouseOverBackColor = System::Drawing::Color::DodgerBlue;
			this->keyboardBut->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->keyboardBut->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->keyboardBut->Location = System::Drawing::Point(340, 429);
			this->keyboardBut->Name = L"keyboardBut";
			this->keyboardBut->Size = System::Drawing::Size(113, 59);
			this->keyboardBut->TabIndex = 11;
			this->keyboardBut->Text = L"Enable keyboard";
			this->keyboardBut->UseVisualStyleBackColor = false;
			this->keyboardBut->Click += gcnew System::EventHandler(this, &PC_Unit::keyboardBut_Click);
			// 
			// flowLayoutPanel1
			// 
			this->flowLayoutPanel1->BackColor = System::Drawing::Color::LightBlue;
			this->flowLayoutPanel1->Controls->Add(this->labelSensorReadings);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel2);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel3);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel8);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel6);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel4);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel9);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel5);
			this->flowLayoutPanel1->Controls->Add(this->flowLayoutPanel7);
			this->flowLayoutPanel1->Location = System::Drawing::Point(774, 12);
			this->flowLayoutPanel1->Name = L"flowLayoutPanel1";
			this->flowLayoutPanel1->Size = System::Drawing::Size(244, 344);
			this->flowLayoutPanel1->TabIndex = 12;
			// 
			// labelSensorReadings
			// 
			this->labelSensorReadings->AutoSize = true;
			this->labelSensorReadings->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14, System::Drawing::FontStyle::Regular,
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->labelSensorReadings->Location = System::Drawing::Point(3, 0);
			this->labelSensorReadings->Name = L"labelSensorReadings";
			this->labelSensorReadings->Size = System::Drawing::Size(233, 32);
			this->labelSensorReadings->TabIndex = 13;
			this->labelSensorReadings->Text = L"Sensor Readings";
			// 
			// flowLayoutPanel2
			// 
			this->flowLayoutPanel2->BackColor = System::Drawing::Color::CadetBlue;
			this->flowLayoutPanel2->Controls->Add(this->labelLeftIRFront);
			this->flowLayoutPanel2->Controls->Add(this->textBoxLeftIRFront);
			this->flowLayoutPanel2->Location = System::Drawing::Point(3, 35);
			this->flowLayoutPanel2->Name = L"flowLayoutPanel2";
			this->flowLayoutPanel2->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel2->TabIndex = 13;
			// 
			// labelLeftIRFront
			// 
			this->labelLeftIRFront->AutoSize = true;
			this->labelLeftIRFront->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelLeftIRFront->Location = System::Drawing::Point(3, 0);
			this->labelLeftIRFront->Name = L"labelLeftIRFront";
			this->labelLeftIRFront->Size = System::Drawing::Size(72, 50);
			this->labelLeftIRFront->TabIndex = 0;
			this->labelLeftIRFront->Text = L"Left IR front:";
			// 
			// textBoxLeftIRFront
			// 
			this->textBoxLeftIRFront->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxLeftIRFront->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxLeftIRFront->Location = System::Drawing::Point(3, 53);
			this->textBoxLeftIRFront->Name = L"textBoxLeftIRFront";
			this->textBoxLeftIRFront->ReadOnly = true;
			this->textBoxLeftIRFront->Size = System::Drawing::Size(105, 34);
			this->textBoxLeftIRFront->TabIndex = 1;
			// 
			// flowLayoutPanel3
			// 
			this->flowLayoutPanel3->BackColor = System::Drawing::Color::CadetBlue;
			this->flowLayoutPanel3->Controls->Add(this->labelLeftIRRear);
			this->flowLayoutPanel3->Controls->Add(this->textBoxLeftIRRear);
			this->flowLayoutPanel3->Location = System::Drawing::Point(124, 35);
			this->flowLayoutPanel3->Name = L"flowLayoutPanel3";
			this->flowLayoutPanel3->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel3->TabIndex = 14;
			// 
			// labelLeftIRRear
			// 
			this->labelLeftIRRear->AutoSize = true;
			this->labelLeftIRRear->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelLeftIRRear->Location = System::Drawing::Point(3, 0);
			this->labelLeftIRRear->Name = L"labelLeftIRRear";
			this->labelLeftIRRear->Size = System::Drawing::Size(72, 50);
			this->labelLeftIRRear->TabIndex = 0;
			this->labelLeftIRRear->Text = L"Left IR rear:";
			// 
			// textBoxLeftIRRear
			// 
			this->textBoxLeftIRRear->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxLeftIRRear->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxLeftIRRear->Location = System::Drawing::Point(3, 53);
			this->textBoxLeftIRRear->Name = L"textBoxLeftIRRear";
			this->textBoxLeftIRRear->ReadOnly = true;
			this->textBoxLeftIRRear->Size = System::Drawing::Size(105, 34);
			this->textBoxLeftIRRear->TabIndex = 1;
			// 
			// flowLayoutPanel8
			// 
			this->flowLayoutPanel8->BackColor = System::Drawing::Color::CadetBlue;
			this->flowLayoutPanel8->Controls->Add(this->labelIRLeft);
			this->flowLayoutPanel8->Controls->Add(this->textBoxIRLeft);
			this->flowLayoutPanel8->Location = System::Drawing::Point(3, 113);
			this->flowLayoutPanel8->Name = L"flowLayoutPanel8";
			this->flowLayoutPanel8->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel8->TabIndex = 19;
			// 
			// labelIRLeft
			// 
			this->labelIRLeft->AutoSize = true;
			this->labelIRLeft->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelIRLeft->Location = System::Drawing::Point(3, 0);
			this->labelIRLeft->Name = L"labelIRLeft";
			this->labelIRLeft->Size = System::Drawing::Size(73, 25);
			this->labelIRLeft->TabIndex = 0;
			this->labelIRLeft->Text = L"Left IR:";
			// 
			// textBoxIRLeft
			// 
			this->textBoxIRLeft->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxIRLeft->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxIRLeft->Location = System::Drawing::Point(3, 28);
			this->textBoxIRLeft->Name = L"textBoxIRLeft";
			this->textBoxIRLeft->ReadOnly = true;
			this->textBoxIRLeft->Size = System::Drawing::Size(105, 34);
			this->textBoxIRLeft->TabIndex = 1;
			// 
			// flowLayoutPanel6
			// 
			this->flowLayoutPanel6->BackColor = System::Drawing::Color::CadetBlue;
			this->flowLayoutPanel6->Controls->Add(this->labelIRRight);
			this->flowLayoutPanel6->Controls->Add(this->textBoxIRRight);
			this->flowLayoutPanel6->Location = System::Drawing::Point(124, 113);
			this->flowLayoutPanel6->Name = L"flowLayoutPanel6";
			this->flowLayoutPanel6->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel6->TabIndex = 17;
			// 
			// labelIRRight
			// 
			this->labelIRRight->AutoSize = true;
			this->labelIRRight->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelIRRight->Location = System::Drawing::Point(3, 0);
			this->labelIRRight->Name = L"labelIRRight";
			this->labelIRRight->Size = System::Drawing::Size(85, 25);
			this->labelIRRight->TabIndex = 0;
			this->labelIRRight->Text = L"Right IR:";
			// 
			// textBoxIRRight
			// 
			this->textBoxIRRight->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxIRRight->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxIRRight->Location = System::Drawing::Point(3, 28);
			this->textBoxIRRight->Name = L"textBoxIRRight";
			this->textBoxIRRight->ReadOnly = true;
			this->textBoxIRRight->Size = System::Drawing::Size(105, 34);
			this->textBoxIRRight->TabIndex = 1;
			// 
			// flowLayoutPanel4
			// 
			this->flowLayoutPanel4->BackColor = System::Drawing::Color::CadetBlue;
			this->flowLayoutPanel4->Controls->Add(this->labelIRFront);
			this->flowLayoutPanel4->Controls->Add(this->textBoxIRFront);
			this->flowLayoutPanel4->Location = System::Drawing::Point(3, 191);
			this->flowLayoutPanel4->Name = L"flowLayoutPanel4";
			this->flowLayoutPanel4->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel4->TabIndex = 15;
			// 
			// labelIRFront
			// 
			this->labelIRFront->AutoSize = true;
			this->labelIRFront->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelIRFront->Location = System::Drawing::Point(3, 0);
			this->labelIRFront->Name = L"labelIRFront";
			this->labelIRFront->Size = System::Drawing::Size(86, 25);
			this->labelIRFront->TabIndex = 0;
			this->labelIRFront->Text = L"Front IR:";
			// 
			// textBoxIRFront
			// 
			this->textBoxIRFront->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxIRFront->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxIRFront->Location = System::Drawing::Point(3, 28);
			this->textBoxIRFront->Name = L"textBoxIRFront";
			this->textBoxIRFront->ReadOnly = true;
			this->textBoxIRFront->Size = System::Drawing::Size(105, 34);
			this->textBoxIRFront->TabIndex = 1;
			// 
			// flowLayoutPanel9
			// 
			this->flowLayoutPanel9->BackColor = System::Drawing::Color::CadetBlue;
			this->flowLayoutPanel9->Controls->Add(this->labelPhotoDistance);
			this->flowLayoutPanel9->Controls->Add(this->textBoxPhotoDistance);
			this->flowLayoutPanel9->Location = System::Drawing::Point(124, 191);
			this->flowLayoutPanel9->Name = L"flowLayoutPanel9";
			this->flowLayoutPanel9->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel9->TabIndex = 20;
			// 
			// labelPhotoDistance
			// 
			this->labelPhotoDistance->AutoSize = true;
			this->labelPhotoDistance->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelPhotoDistance->Location = System::Drawing::Point(3, 0);
			this->labelPhotoDistance->Name = L"labelPhotoDistance";
			this->labelPhotoDistance->Size = System::Drawing::Size(94, 50);
			this->labelPhotoDistance->TabIndex = 0;
			this->labelPhotoDistance->Text = L"Photo Distance:";
			// 
			// textBoxPhotoDistance
			// 
			this->textBoxPhotoDistance->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxPhotoDistance->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular,
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->textBoxPhotoDistance->Location = System::Drawing::Point(3, 53);
			this->textBoxPhotoDistance->Name = L"textBoxPhotoDistance";
			this->textBoxPhotoDistance->ReadOnly = true;
			this->textBoxPhotoDistance->Size = System::Drawing::Size(105, 34);
			this->textBoxPhotoDistance->TabIndex = 1;
			// 
			// flowLayoutPanel5
			// 
			this->flowLayoutPanel5->BackColor = System::Drawing::Color::CadetBlue;
			this->flowLayoutPanel5->Controls->Add(this->labelGyro);
			this->flowLayoutPanel5->Controls->Add(this->textBoxGyro);
			this->flowLayoutPanel5->Location = System::Drawing::Point(3, 269);
			this->flowLayoutPanel5->Name = L"flowLayoutPanel5";
			this->flowLayoutPanel5->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel5->TabIndex = 16;
			// 
			// labelGyro
			// 
			this->labelGyro->AutoSize = true;
			this->labelGyro->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelGyro->Location = System::Drawing::Point(3, 0);
			this->labelGyro->Name = L"labelGyro";
			this->labelGyro->Size = System::Drawing::Size(60, 25);
			this->labelGyro->TabIndex = 0;
			this->labelGyro->Text = L"Gyro:";
			// 
			// textBoxGyro
			// 
			this->textBoxGyro->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxGyro->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBoxGyro->Location = System::Drawing::Point(3, 28);
			this->textBoxGyro->Name = L"textBoxGyro";
			this->textBoxGyro->ReadOnly = true;
			this->textBoxGyro->Size = System::Drawing::Size(105, 34);
			this->textBoxGyro->TabIndex = 1;
			// 
			// flowLayoutPanel7
			// 
			this->flowLayoutPanel7->BackColor = System::Drawing::Color::CadetBlue;
			this->flowLayoutPanel7->Controls->Add(this->labelIRGoal);
			this->flowLayoutPanel7->Controls->Add(this->textBoxGoalDetector);
			this->flowLayoutPanel7->Location = System::Drawing::Point(124, 269);
			this->flowLayoutPanel7->Name = L"flowLayoutPanel7";
			this->flowLayoutPanel7->Size = System::Drawing::Size(115, 72);
			this->flowLayoutPanel7->TabIndex = 18;
			// 
			// labelIRGoal
			// 
			this->labelIRGoal->AutoSize = true;
			this->labelIRGoal->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->labelIRGoal->Location = System::Drawing::Point(3, 0);
			this->labelIRGoal->Name = L"labelIRGoal";
			this->labelIRGoal->Size = System::Drawing::Size(88, 50);
			this->labelIRGoal->TabIndex = 0;
			this->labelIRGoal->Text = L"Goal detector:";
			// 
			// textBoxGoalDetector
			// 
			this->textBoxGoalDetector->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBoxGoalDetector->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15, System::Drawing::FontStyle::Regular,
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->textBoxGoalDetector->Location = System::Drawing::Point(3, 53);
			this->textBoxGoalDetector->Name = L"textBoxGoalDetector";
			this->textBoxGoalDetector->ReadOnly = true;
			this->textBoxGoalDetector->Size = System::Drawing::Size(105, 34);
			this->textBoxGoalDetector->TabIndex = 1;
			// 
			// panelSensRecieved
			// 
			this->panelSensRecieved->BackColor = System::Drawing::Color::Gainsboro;
			this->panelSensRecieved->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->panelSensRecieved->Location = System::Drawing::Point(993, 15);
			this->panelSensRecieved->Name = L"panelSensRecieved";
			this->panelSensRecieved->Size = System::Drawing::Size(20, 20);
			this->panelSensRecieved->TabIndex = 21;
			// 
			// panelMapRecieved
			// 
			this->panelMapRecieved->BackColor = System::Drawing::Color::Gainsboro;
			this->panelMapRecieved->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->panelMapRecieved->Location = System::Drawing::Point(743, 15);
			this->panelMapRecieved->Name = L"panelMapRecieved";
			this->panelMapRecieved->Size = System::Drawing::Size(20, 20);
			this->panelMapRecieved->TabIndex = 21;
			this->panelMapRecieved->Visible = false;
			// 
			// resetBut
			// 
			this->resetBut->BackColor = System::Drawing::Color::CornflowerBlue;
			this->resetBut->Cursor = System::Windows::Forms::Cursors::Arrow;
			this->resetBut->FlatAppearance->BorderColor = System::Drawing::Color::CornflowerBlue;
			this->resetBut->FlatAppearance->MouseDownBackColor = System::Drawing::Color::RoyalBlue;
			this->resetBut->FlatAppearance->MouseOverBackColor = System::Drawing::Color::DodgerBlue;
			this->resetBut->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->resetBut->ForeColor = System::Drawing::Color::Black;
			this->resetBut->Location = System::Drawing::Point(459, 429);
			this->resetBut->Name = L"resetBut";
			this->resetBut->Size = System::Drawing::Size(113, 59);
			this->resetBut->TabIndex = 13;
			this->resetBut->Text = L"Reset program";
			this->resetBut->UseVisualStyleBackColor = false;
			this->resetBut->Click += gcnew System::EventHandler(this, &PC_Unit::resetBut_Click);
			// 
			// labelUncharted
			// 
			this->labelUncharted->AutoSize = true;
			this->labelUncharted->Location = System::Drawing::Point(677, 38);
			this->labelUncharted->Name = L"labelUncharted";
			this->labelUncharted->Size = System::Drawing::Size(81, 20);
			this->labelUncharted->TabIndex = 14;
			this->labelUncharted->Text = L"uncharted";
			this->labelUncharted->Visible = false;
			// 
			// labelOpen
			// 
			this->labelOpen->AutoSize = true;
			this->labelOpen->Location = System::Drawing::Point(677, 78);
			this->labelOpen->Name = L"labelOpen";
			this->labelOpen->Size = System::Drawing::Size(45, 20);
			this->labelOpen->TabIndex = 15;
			this->labelOpen->Text = L"open";
			this->labelOpen->Visible = false;
			// 
			// labelGoal
			// 
			this->labelGoal->AutoSize = true;
			this->labelGoal->Location = System::Drawing::Point(677, 118);
			this->labelGoal->Name = L"labelGoal";
			this->labelGoal->Size = System::Drawing::Size(39, 20);
			this->labelGoal->TabIndex = 16;
			this->labelGoal->Text = L"goal";
			this->labelGoal->Visible = false;
			// 
			// labelPosition
			// 
			this->labelPosition->AutoSize = true;
			this->labelPosition->Location = System::Drawing::Point(677, 98);
			this->labelPosition->Name = L"labelPosition";
			this->labelPosition->Size = System::Drawing::Size(119, 20);
			this->labelPosition->TabIndex = 17;
			this->labelPosition->Text = L"Wall-YI position";
			this->labelPosition->Visible = false;
			// 
			// labelWall
			// 
			this->labelWall->AutoSize = true;
			this->labelWall->Location = System::Drawing::Point(677, 58);
			this->labelWall->Name = L"labelWall";
			this->labelWall->Size = System::Drawing::Size(35, 20);
			this->labelWall->TabIndex = 18;
			this->labelWall->Text = L"wall";
			this->labelWall->Visible = false;
			// 
			// labelCOMComboBox
			// 
			this->labelCOMComboBox->AutoSize = true;
			this->labelCOMComboBox->ForeColor = System::Drawing::SystemColors::ControlDark;
			this->labelCOMComboBox->Location = System::Drawing::Point(907, 363);
			this->labelCOMComboBox->Name = L"labelCOMComboBox";
			this->labelCOMComboBox->RightToLeft = System::Windows::Forms::RightToLeft::No;
			this->labelCOMComboBox->Size = System::Drawing::Size(150, 20);
			this->labelCOMComboBox->TabIndex = 19;
			this->labelCOMComboBox->Text = L"Availible COM ports:";
			// 
			// contextMenuStrip1
			// 
			this->contextMenuStrip1->ImageScalingSize = System::Drawing::Size(24, 24);
			this->contextMenuStrip1->Name = L"contextMenuStrip1";
			this->contextMenuStrip1->Size = System::Drawing::Size(74, 4);
			// 
			// textBox1
			// 
			this->textBox1->BackColor = System::Drawing::Color::LightBlue;
			this->textBox1->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->textBox1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->textBox1->ForeColor = System::Drawing::SystemColors::AppWorkspace;
			this->textBox1->Location = System::Drawing::Point(906, 420);
			this->textBox1->Multiline = true;
			this->textBox1->Name = L"textBox1";
			this->textBox1->Size = System::Drawing::Size(112, 162);
			this->textBox1->TabIndex = 22;
			this->textBox1->Text = L"Copyright property of \r\n\r\nthe YI-bot Group®: The amazing team for TSEA56, Elektro"
				L"nik Kandidatprojekt, 2016\r\n\r\nGUI design by Albin Detterfelt (mostly anyway)";
			// 
			// modeCheckedListBox
			// 
			this->modeCheckedListBox->BackColor = System::Drawing::Color::LightBlue;
			this->modeCheckedListBox->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->modeCheckedListBox->Enabled = false;
			this->modeCheckedListBox->FormattingEnabled = true;
			this->modeCheckedListBox->Items->AddRange(gcnew cli::array< System::Object^  >(2) { L"Remote control mode", L"Autonomous mode" });
			this->modeCheckedListBox->Location = System::Drawing::Point(635, 310);
			this->modeCheckedListBox->Name = L"modeCheckedListBox";
			this->modeCheckedListBox->Size = System::Drawing::Size(129, 42);
			this->modeCheckedListBox->TabIndex = 23;
			this->modeCheckedListBox->Visible = false;
			// 
			// pictureBox1
			// 
			this->pictureBox1->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"pictureBox1.Image")));
			this->pictureBox1->InitialImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"pictureBox1.InitialImage")));
			this->pictureBox1->Location = System::Drawing::Point(906, 551);
			this->pictureBox1->Name = L"pictureBox1";
			this->pictureBox1->Size = System::Drawing::Size(112, 31);
			this->pictureBox1->SizeMode = System::Windows::Forms::PictureBoxSizeMode::Zoom;
			this->pictureBox1->TabIndex = 24;
			this->pictureBox1->TabStop = false;
			// 
			// labelDecisionPoint
			// 
			this->labelDecisionPoint->AutoSize = true;
			this->labelDecisionPoint->Location = System::Drawing::Point(677, 138);
			this->labelDecisionPoint->Name = L"labelDecisionPoint";
			this->labelDecisionPoint->Size = System::Drawing::Size(106, 20);
			this->labelDecisionPoint->TabIndex = 25;
			this->labelDecisionPoint->Text = L"decision point";
			this->labelDecisionPoint->Visible = false;
			// 
			// labelVisited
			// 
			this->labelVisited->AutoSize = true;
			this->labelVisited->Location = System::Drawing::Point(677, 158);
			this->labelVisited->Name = L"labelVisited";
			this->labelVisited->Size = System::Drawing::Size(53, 20);
			this->labelVisited->TabIndex = 26;
			this->labelVisited->Text = L"visited";
			this->labelVisited->Visible = false;
			// 
			// labelStart
			// 
			this->labelStart->AutoSize = true;
			this->labelStart->Location = System::Drawing::Point(677, 178);
			this->labelStart->Name = L"labelStart";
			this->labelStart->Size = System::Drawing::Size(41, 20);
			this->labelStart->TabIndex = 27;
			this->labelStart->Text = L"start";
			this->labelStart->Visible = false;
			// 
			// labelRoute
			// 
			this->labelRoute->AutoSize = true;
			this->labelRoute->Location = System::Drawing::Point(677, 198);
			this->labelRoute->Name = L"labelRoute";
			this->labelRoute->Size = System::Drawing::Size(46, 20);
			this->labelRoute->TabIndex = 28;
			this->labelRoute->Text = L"route";
			this->labelRoute->Visible = false;
			// 
			// PC_Unit
			// 
			this->AcceptButton = this->openCOMBut;
			this->AutoScaleDimensions = System::Drawing::SizeF(9, 20);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->AutoSize = true;
			this->BackColor = System::Drawing::Color::GhostWhite;
			this->ClientSize = System::Drawing::Size(1025, 589);
			this->Controls->Add(this->labelRoute);
			this->Controls->Add(this->labelStart);
			this->Controls->Add(this->panelSensRecieved);
			this->Controls->Add(this->panelMapRecieved);
			this->Controls->Add(this->labelVisited);
			this->Controls->Add(this->labelDecisionPoint);
			this->Controls->Add(this->pictureBox1);
			this->Controls->Add(this->modeCheckedListBox);
			this->Controls->Add(this->textBox1);
			this->Controls->Add(this->labelCOMComboBox);
			this->Controls->Add(this->labelWall);
			this->Controls->Add(this->labelPosition);
			this->Controls->Add(this->labelGoal);
			this->Controls->Add(this->labelOpen);
			this->Controls->Add(this->labelUncharted);
			this->Controls->Add(this->resetBut);
			this->Controls->Add(this->flowLayoutPanel1);
			this->Controls->Add(this->keyboardBut);
			this->Controls->Add(this->commandBox);
			this->Controls->Add(this->sendButton);
			this->Controls->Add(this->COMComboBox);
			this->Controls->Add(this->BluetoothRecievedTextBox);
			this->Controls->Add(this->disconnectBut);
			this->Controls->Add(this->openCOMBut);
			this->Controls->Add(this->outPutTextBox);
			this->Cursor = System::Windows::Forms::Cursors::Arrow;
			this->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->ForeColor = System::Drawing::SystemColors::ControlText;
			this->HelpButton = true;
			this->Icon = (cli::safe_cast<System::Drawing::Icon^>(resources->GetObject(L"$this.Icon")));
			this->MinimumSize = System::Drawing::Size(1043, 614);
			this->Name = L"PC_Unit";
			this->StartPosition = System::Windows::Forms::FormStartPosition::CenterScreen;
			this->Text = L"PC_Unit";
			this->FormClosing += gcnew System::Windows::Forms::FormClosingEventHandler(this, &PC_Unit::PC_Unit_FormClosing);
			this->flowLayoutPanel1->ResumeLayout(false);
			this->flowLayoutPanel1->PerformLayout();
			this->flowLayoutPanel2->ResumeLayout(false);
			this->flowLayoutPanel2->PerformLayout();
			this->flowLayoutPanel3->ResumeLayout(false);
			this->flowLayoutPanel3->PerformLayout();
			this->flowLayoutPanel8->ResumeLayout(false);
			this->flowLayoutPanel8->PerformLayout();
			this->flowLayoutPanel6->ResumeLayout(false);
			this->flowLayoutPanel6->PerformLayout();
			this->flowLayoutPanel4->ResumeLayout(false);
			this->flowLayoutPanel4->PerformLayout();
			this->flowLayoutPanel9->ResumeLayout(false);
			this->flowLayoutPanel9->PerformLayout();
			this->flowLayoutPanel5->ResumeLayout(false);
			this->flowLayoutPanel5->PerformLayout();
			this->flowLayoutPanel7->ResumeLayout(false);
			this->flowLayoutPanel7->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->pictureBox1))->EndInit();
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
		///<summary>
		///Initialization of things not generated by the windows form
		///</summary>
		void InitializeOther(void) {
			mapCols = 31;
			mapRows = 17;
			mapWidth = mapCols * 20;
			mapHeight = mapRows * 20;
			mapXCoord = 15;
			mapYCoord = 15;
			mapGraphics = this->CreateGraphics();
			bgGraphics = this->CreateGraphics();
			mapBrush = gcnew Drawing::SolidBrush(Color::DeepPink);
			readHeader = true;
		}
		delegate void writeRecievedDelegateString(String^ s);
		delegate void writeRecievedDelegateInt(int data);
		delegate void sensorTextboxDelegate2(int data);
		delegate void sensorTextboxDelegate(System::Windows::Forms::TextBox^ textbox, int data);
		delegate void keyboardButDelegate(bool enabled);
		delegate void modeCheckedListBoxDelegate(System::Windows::Forms::CheckedListBox^ cLBox, char c);


		///Paints a test map in the area in the form where the final map is to be painted
	private: System::Void paintMapRect(char type, int rowIndex, int colIndex) {
		if (type < 70) type = 'f';
		switch (type) {
		case 'o':
			mapBrush->Color = Color::Aquamarine;
			//open but uncharted
			break;
		case 'u':
			mapBrush->Color = Color::GhostWhite;
			//uncharted
			break;
		case 'w':
			mapBrush->Color = Color::DarkGray;
			//wall
			break;
		case 'g':
			mapBrush->Color = Color::SteelBlue;
			//goal
			break;
		case 'p':
			mapBrush->Color = Color::Salmon;
			//position of robot
			break;
		case 'd':
			mapBrush->Color = Color::Khaki;
			//decision point
			break;
		case 'c':
			mapBrush->Color = Color::MediumAquamarine;
			//open and charted 
			break;
		case 's':
			mapBrush->Color = Color::MediumPurple;
			//start position
			break;
		case 'r':
			mapBrush->Color = Color::Tan;
			//route
			break;
		case 'f':
			mapBrush->Color = Color::LightGreen;
			//flooded
			break;
		default:
			mapBrush->Color = Color::Magenta;
			//Something went wrong
			break;
		}
		int tmpX = mapXCoord + colIndex * mapWidth / (mapCols);
		int tmpY = mapYCoord + rowIndex * mapHeight / (mapRows);
		int tmpWidth = (int)(0.9 * (float)mapWidth / mapCols);
		int tmpHeight = (int)(0.9 * (float)mapHeight / mapRows);
		mapGraphics->FillRectangle(mapBrush, tmpX, tmpY, tmpWidth, tmpHeight);
	}
			 ///Paints the background for the map
	private: System::Void paintMapBackground()
	{
		this->panelMapRecieved->Visible = true;
		Drawing::SolidBrush ^tmpBrush = gcnew Drawing::SolidBrush(Color::LightBlue);
		this->bgGraphics->FillRectangle(tmpBrush, mapXCoord - 3, mapYCoord - 3, /*mapWidth + 4*/ mapWidth + 134, mapHeight + 4);
		int newX = mapXCoord + 32 * mapWidth / (mapCols);
		int newY = mapYCoord + 1 * mapHeight / (mapRows);
		int newWidth = (int)(0.9 * (float)mapWidth / mapCols);
		int newHeight = (int)(0.9 * (float)mapHeight / mapRows);
		bgGraphics->FillRectangle(tmpBrush, newX - 1, newY - 1, newWidth + 2, newHeight + 2);
		paintMapRect('u', 1, 32);
		paintMapRect('w', 2, 32);
		paintMapRect('o', 3, 32);
		paintMapRect('p', 4, 32);
		paintMapRect('g', 5, 32);
		paintMapRect('d', 6, 32);
		paintMapRect('c', 7, 32);
		paintMapRect('s', 8, 32);
		paintMapRect('r', 9, 32);
		this->labelUncharted->Visible = true;
		this->labelWall->Visible = true;
		this->labelOpen->Visible = true;
		this->labelPosition->Visible = true;
		this->labelGoal->Visible = true;
		this->labelDecisionPoint->Visible = true;
		this->labelVisited->Visible = true;
		this->labelStart->Visible = true;
		this->labelRoute->Visible = true;
		this->labelUncharted->BackColor = Color::LightBlue;
		this->labelWall->BackColor = Color::LightBlue;
		this->labelOpen->BackColor = Color::LightBlue;
		this->labelPosition->BackColor = Color::LightBlue;
		this->labelGoal->BackColor = Color::LightBlue;
		this->labelDecisionPoint->BackColor = Color::LightBlue;
		this->labelVisited->BackColor = Color::LightBlue;
		this->labelStart->BackColor = Color::LightBlue;
		this->labelRoute->BackColor = Color::LightBlue;
	}
			 ///Sends a String to robot via Bluetooth
	public: static void send(String ^s)
	{
		if (serialPort2->IsOpen)
		{
			PC_Unit::serialPort2->Write(s);
		}
		else
		{
			writeToUser("CANNOT SEND: Serial port not open");
		}
	}
			///Writes a String in the textBox for receieved bluetooth
	private: void writeRecieved(String ^s)
	{
		try
		{
			if (this->BluetoothRecievedTextBox->InvokeRequired)
			{
				writeRecievedDelegateString^ d =
					gcnew writeRecievedDelegateString(this, &PC_Unit::writeRecieved);
				this->Invoke(d, gcnew array<Object^> { s });
			}
			else
			{
				this->BluetoothRecievedTextBox->Text += ("\r\n-> " + s);
			}
		}
		catch (System::ObjectDisposedException^)
		{
			// do nothing
			// window is closed
		}
	}
			 ///Writes an int in the textBox for receieved bluetooth
	private: void writeRecieved(int data)
	{
		if (this->BluetoothRecievedTextBox->InvokeRequired)
		{
			writeRecievedDelegateInt^ d =
				gcnew writeRecievedDelegateInt(this, &PC_Unit::writeRecieved);
			this->Invoke(d, gcnew array<Object^> { data });
		}
		else
		{
			this->BluetoothRecievedTextBox->Text += data;
		}
	}
			 ///Enables the keyboardBut button
	private: void setKeyboardButEnable(bool enabled)
	{
		if (this->keyboardBut->InvokeRequired)
		{
			keyboardButDelegate^ d =
				gcnew keyboardButDelegate(this, &PC_Unit::setKeyboardButEnable);
			this->Invoke(d, gcnew array<Object^>{enabled});
		}
		else
		{
			this->keyboardBut->Enabled = enabled;
		}
	}
			 ///Sets the mode robot is in for display in the form (modeCheckedListBox)
			 ///needs the checkedListBox and character that describes the mode
			 /// 'n' is autonomous mode,
			 /// 'r' is remote controlled mode
	private: void setModeCheckedListBox(System::Windows::Forms::CheckedListBox^ cLBox, char c)
	{
		if (this->modeCheckedListBox->InvokeRequired)
		{
			modeCheckedListBoxDelegate^ d =
				gcnew modeCheckedListBoxDelegate(this, &PC_Unit::setModeCheckedListBox);
			this->Invoke(d, gcnew array<Object^>{cLBox, c});
		}
		else
		{
			if (c == 'n')
			{
				cLBox->SetItemChecked(0, false);
				cLBox->SetItemChecked(1, true);
			}
			else if (c == 'r')
			{
				cLBox->SetItemChecked(0, true);
				cLBox->SetItemChecked(1, false);
			}
			else
			{
				cLBox->SetItemChecked(0, false);
				cLBox->SetItemChecked(1, false);
			}
		}
	}
			 ///Writes recieved sensor data to the designated textBox
			 ///Give parameters:
			 ///textBox - the designated textbox
			 ///data - the sensor data to write
	private: void writeSensorData(System::Windows::Forms::TextBox^ textbox, int data)
	{
		try
		{
			if (textbox->InvokeRequired)
			{
				sensorTextboxDelegate^ d =
					gcnew sensorTextboxDelegate(this, &PC_Unit::writeSensorData);
				this->Invoke(d, gcnew array<Object^> { textbox, data });
			}
			else
			{
				textbox->Text = ""; // Ugly		
				textbox->Text += data;
			}
		}
		catch (System::ObjectDisposedException^)
		{
			// do nothing
			// window is closed
		}
	}
			 ///Writes String to the textbox for program output to user
	public: static void writeToUser(String ^s)
	{
		PC_Unit::outPutTextBox->ForeColor = Color::Blue;
		PC_Unit::outPutTextBox->Text += "\r\n-> ";
		PC_Unit::outPutTextBox->ForeColor = Color::Black;
		PC_Unit::outPutTextBox->Text += s;
	}
			///Finds the availible COM ports and adds their names to the COM comboBox
			///(might be redundant now)
	private: void findPorts(void)
	{
		array<Object^>^ objectArray = SerialPort::GetPortNames();
		this->COMComboBox->Items->AddRange(objectArray);
	}
			 ///opens two found COM ports (they should be opened in the correct order for send/recieve functions to work)
	private: System::Void openCOMBut_Click(System::Object^  sender, System::EventArgs^  e)
	{
		if (!mapBackgroundPainted)
		{
			paintMapBackground();
			mapBackgroundPainted = true;
		}
		if (!(serialPort1->IsOpen & serialPort2->IsOpen))
		{
			try {
				writeToUser("Searching for COM ports...");
				array<Object^>^ objectArray = SerialPort::GetPortNames();
				this->COMComboBox->Items->Clear();
				this->COMComboBox->Items->AddRange(objectArray);
				writeToUser("COM ports added to the cool combo box");
				SerialPort ^tempSP;
				tempSP = serialPort1;
				if (!tempSP->IsOpen)
				{
					tempSP->PortName = objectArray[0]->ToString();
					tempSP->BaudRate = 115200;
					tempSP->Open();
					writeToUser(tempSP->PortName + " is opened");
				}
				tempSP = serialPort2;
				if (!tempSP->IsOpen)
				{
					tempSP->PortName = objectArray[1]->ToString();
					tempSP->BaudRate = 115200;
					tempSP->Open();
					writeToUser(tempSP->PortName + " is opened");
				}

				this->keyboardBut->Enabled::set(true);
				this->sendButton->Enabled::set(true);
				this->commandBox->Enabled::set(true);
				this->COMComboBox->Enabled::set(true);
				this->disconnectBut->Enabled = true;
				labelCOMComboBox->ForeColor = Color::Black;
				this->AcceptButton = this->sendButton;
				// Tell robot, BT-link is up
				send("c");
				this->openCOMBut->Enabled = false;
			}
			catch (System::IO::IOException^)
			{
				writeToUser("Opening COM ports failed, try again.");
			}
			catch (System::IndexOutOfRangeException^)
			{
				writeToUser("Opening COM ports failed. It is likely that the Bluetooth module on your PC is disabled.");
			}
		}
		else
		{
			writeToUser("COM ports are already open fool!");
		}
	}
			 ///Closes the COM ports in use
	private: System::Void disconnectBut_Click(System::Object^  sender, System::EventArgs^  e) {
		serialPort1->Close();
		serialPort2->Close();
		writeToUser("Disconnected from COM ports");
		this->disconnectBut->Enabled = false;
		this->keyboardBut->Enabled = false;
		this->sendButton->Enabled = false;
		this->commandBox->Enabled = false;
		this->COMComboBox->Enabled = false;
		this->openCOMBut->Enabled = true;
		labelCOMComboBox->ForeColor = Color::Gray;
		setModeCheckedListBox(modeCheckedListBox, 'x');
		this->AcceptButton = this->openCOMBut;
		this->openCOMBut->Focus();
	}
			 ///sends what is written in the commandBox via bluetooth
	private: System::Void sendButton_Click(System::Object^  sender, System::EventArgs^  e) {
		String ^command = this->commandBox->Text;
		if (this->serialPort2->IsOpen)
		{
			if (command != "") {
				send(command);
				writeToUser("\"" + command + "\"" + " sent");
				this->commandBox->Text = "";
			}
		}
		else
		{
			writeToUser("Serial port 2 aint open bro");
		}
	}
			 ///Click och keyboardBut opens a new form that reads keys and sends them out via bluetooth
	private: System::Void keyboardBut_Click(System::Object^  sender, System::EventArgs^  e);
			 ///should never be used hopefully
	private: System::Void serialPort1_DataReceived(System::Object^  sender, System::IO::Ports::SerialDataReceivedEventArgs^  e) {
		writeRecieved("Data recieved on " + serialPort1->PortName);
		String ^recieved = serialPort1->ReadExisting();
		writeRecieved(recieved);
	}
	private: void paintMap()
	{
		for (int i = 0; i < mapRows; i++)
		{
			for (int j = 0; j < mapCols; j++)
			{
				if (this->pc_map_new[j + i * mapCols] != this->pc_map[j + i * mapCols])
				{
					this->pc_map[j + i * mapCols] = this->pc_map_new[j + i * mapCols];
					paintMapRect(this->pc_map_new[j + i * mapCols], i, j);
				}
			}
		}
	}
	private: void ReadMap()
	{
		char temp;
		for (int i = 0; i < mapRows; i++)
		{
			for (int j = 0; j < mapCols; j++)
			{
				temp = serialPort2->ReadByte();
				if (temp != this->pc_map_new[j + i * mapCols])
				{
					this->pc_map_new[j + i * mapCols] = temp;
				}
			}
		}
	}
			 /// Reads two bytes received in COM port and returns them as an int
	private: int Read16SP2()
	{
		try
		{
			int dataread = serialPort2->ReadByte();		// Read higher byte of uint16
			int lowerbyte = serialPort2->ReadByte();	// Read lower byte of uint16
			dataread = dataread << 8; // Left-shift by 8 bits to make room for lower byte
			dataread += lowerbyte;
			return dataread;
		}
		catch (System::IO::IOException^)
		{
			//do nothing
		}
	}
			 /// Reads the sensor data receieved in the order it is sent
	private: void ReadSensor()
	{
		try
		{
			//receive order: front Left IR, back Left IR, right IR, front IR,  gyro, distance photo, goaldetect IR
			writeSensorData(this->textBoxLeftIRFront, serialPort2->ReadByte());
			writeSensorData(this->textBoxLeftIRRear, serialPort2->ReadByte());
			//writeSensorData(this->textBoxIRLeft, serialPort2->ReadByte());
			writeSensorData(this->textBoxIRRight, serialPort2->ReadByte());
			writeSensorData(this->textBoxIRFront, serialPort2->ReadByte());
			writeSensorData(this->textBoxGyro, Read16SP2());
			writeSensorData(this->textBoxPhotoDistance, Read16SP2());
			writeSensorData(this->textBoxGoalDetector, serialPort2->ReadByte());
			//robot position coordinates

			readHeader = true;
		}
		catch (System::IO::IOException^)
		{
			//do nothing
		}
	}
			 ///When data is recieved via bluetooth, the first byte is read as a header char that determines what to do with the received data
	private: System::Void serialPort2_DataReceived(System::Object^  sender, System::IO::Ports::SerialDataReceivedEventArgs^  e) {
		if (true) {
			try
			{
				char header = serialPort2->ReadByte();

				switch (header)
				{
				case 'r':
					//remote_control on		
					writeRecieved("Wall-YI in remote control mode");
					setKeyboardButEnable(true);
					setModeCheckedListBox(this->modeCheckedListBox, 'r');
					break;
				case 'n':
					//remote_control off
					writeRecieved("Wall-YI no longer in remote control mode");
					setKeyboardButEnable(false);
					setModeCheckedListBox(this->modeCheckedListBox, 'n');
					break;
				case 's':
					panelSensRecieved->BackColor = Color::CornflowerBlue;
					readHeader = false;
					ReadSensor();
					Sleep(10);
					panelSensRecieved->BackColor = Color::Gainsboro;
					//sensor_data
					break;
				case 'm':
					panelMapRecieved->BackColor = Color::CornflowerBlue;
					//writeRecieved("Map update recieved");
					ReadMap();
					Sleep(10);
					paintMap();
					panelMapRecieved->BackColor = Color::Gainsboro;
					//map data
					break;
				default:
					writeRecieved("Unknown data recevied" + " \"" + (unsigned char)header + "\"");
					//do nothing
					break;
				}
			}
			catch (System::IO::IOException^)
			{
				writeRecieved("ERROR IN READING FROM COM PORTS (COM ports might have been closed)");
			}
		}
	}
			 ///Creates a "map" to draw an then paints it with the paintmaprect() method
	private: System::Void resetBut_Click(System::Object^  sender, System::EventArgs^  e) {
		for (int i = 0; i < mapCols * mapRows; ++i)
		{
			pc_map[i] = 0;
			pc_map_new[i] = 0;
		}
		this->textBoxGoalDetector->ResetText();
		this->textBoxLeftIRFront->ResetText();
		this->textBoxLeftIRRear->ResetText();
		this->textBoxIRRight->ResetText();
		this->textBoxIRFront->ResetText();
		this->textBoxGyro->ResetText();
		this->textBoxPhotoDistance->ResetText();

		this->outPutTextBox->ResetText();
		this->BluetoothRecievedTextBox->ResetText();

		paintMapBackground();
	}
			 ///When clicking the commandBox the commandBox text is erased and the forms acceptButton is set to the sendButton
	private: System::Void commandBox_Click(System::Object^  sender, System::EventArgs^  e)
	{
		this->AcceptButton = this->sendButton;
		this->commandBox->Text = "";
	}
			 ///... does nothing really
	private: System::Void PC_Unit_FormClosing(System::Object^  sender, System::Windows::Forms::FormClosingEventArgs^  e) {
		if (serialPort1->IsOpen) serialPort1->Close();
		if (serialPort2->IsOpen) serialPort2->Close();
	}
	};
}
#endif // !PC_UNIT_H
