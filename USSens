/*
 * SENS_.c
 *
 * Created: 4/12/2016 8:28:57 AM
 *  Author: marha996
 */ 


/*
 * sensor_test.c
 *
 * Created: 2016-04-06 14:46:59
 * Author : Milton
 */ 
#define F_CPU 1842000UL
#include <avr/io.h>
#include <avr/delay.h>
#include <stdio.h>
#include <avr/interrupt.h>
#include <util/twi.h>

//Initierar bussen
void TWIInit(void) {
	
	//Globalt avbrott aktiverat
	sei();
	
	//Sätter SCL hastighet
	TWSR = (0<<TWPS0)|(0<<TWPS1) ; //Sätter prescaler värdet till 1
	TWBR = 0x0C;  //Sätter Bit rate registry till 12
	
	//Aktiverar bussen, aktiverar ackbit, aktiverar avbrott
	TWCR = (1<<TWEN)|(1<<TWEA)|(1<<TWIE);
	
	//Slavadresser (sista ska vara ett för att enabla general call)
	//Kommmudul: 0x11
	//Sensormodul: 0x21
	//Styrmodul: 0x41
	
	TWAR = 0x21;
}

//Skickar startbit
void TWIStart(void) {
	TWCR = (1<<TWSTA)|(1<<TWINT)|(0<<TWIE)|(1<<TWEN); //Skickar startbit, sätter avbrottsflaggan, avaktiverar avbrott, aktiverar bussen
	while (!(TWCR & (1<<TWINT))); //Väntar på att start-signalen ska skickas iväg ifall bussen är upptagen t.ex.
	
	//Behöver ej kolla 0x08 eller 0x10, startbit eller repeterad startbit
}

//Skickar stoppbit
void TWIStop(void) {
	TWCR = (1<<TWSTO)|(1<<TWINT)|(1<<TWIE)|(1<<TWEN)|(1<<TWEA); //Skickar stoppbit, sätter avbrottsflaggan, aktiverar avbrott, aktviverar bussen, aktviterar ackbit
}

//Skickar adress + data
void TWITransmitData(uint16_t data) {
	
	TWIStart();

	//Skicka SLA + W, adress 00 för att det är general call (till alla slaves)
	TWISend(0x00);
	
	//Arbitration lost, borde dock aldrig hamna här inne?!
	if ((TWSR & 0xF8) == 0x38) {
		TWIStop();
		return;
	}
	//Om inte adress mottagen och inte "not ack" mottagen
	if ((TWSR & 0xF8) == 0x20) {	
		TWIStop();
		return;
	}

	//Skickar sensormodulens adress
	TWISend(0x20);
	
	//Send MSB
	uint8_t newData = data >> 8;
	TWISend(newData);
	
	//Send LSB
	newData = data & 0xFF;
	TWISend(newData);
	
	TWIStop();
}

//Skickar data
void TWISend(uint8_t data) {
	TWDR = data;
	
	TWCR = (0<<TWSTA)|(1<<TWINT)|(1<<TWEN); //Avaktiverar startflaggan och avbrottsflaggan, avktiverar bussen
	
	while (!(TWCR & (1<<TWINT))); //Väntar på ackbit
	
	//Om inte adress mottagen och inte "not ack" mottagen
	if ((TWSR & 0xF8) == 0x30) {
		//very bad....
	}
}

void sendPulse()
{
	PORTA = (1<<PORTA1); // Sätter PA1 till hög under bestämd tid
	_delay_us(20);
	PORTA = (0<<PORTA1);// Sätter PA1 till låg och startar mätningen
}


int main(void)
{
    DDRA = (1<< PORTA1); //PA1 to out
	TWIInit();
	
    while (1) 
    {
		// send pulse to US-Sensor
		sendPulse();
		
		//wait for us-sensor to start measuring
		while(!(PINA & (1<<PINA2)));
		
		//Start counter
		TCCR1B =(1<<CS10);
		
		//wait for final value from us-sensor
		while(PINA & (1<<PINA2));
		
		//Stops counter
		TCCR1B = (0<<CS10);	
		
		//Read counter
		uint16_t distance = TCNT1;	
		
		//reset counter
		TCNT1 = 0x0;
		
		//Transmitt to buss
		TWITransmitData(distance);
		
		//wait
		_delay_ms(10);
	}
}
